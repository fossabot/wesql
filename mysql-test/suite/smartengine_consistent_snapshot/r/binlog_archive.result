# Binlog persist to object store
# Wait for first binlog persistent after startup 
SELECT distinct Log_name from INFORMATION_SCHEMA.BINLOG_PERSISTENT_FILE_INDEX;
Log_name
binlog.000001
SELECT Log_slice_key from INFORMATION_SCHEMA.BINLOG_PERSISTENT_FILES order by Log_slice_key;
Log_slice_key
binlog/binlog.000001.00000000000000000002.0000000559
CREATE DATABASE db1;
CREATE TABLE t1(c1 int, c2 char(200)) ENGINE=SMARTENGINE ;
INSERT INTO t1 values(1,'abcd');
INSERT INTO t1 values(2,'abcd');
INSERT INTO t1 values(3,'abcd');
INSERT INTO t1 values(4,'abcd');
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
FLUSH logs;
INSERT INTO t1 values(5,'abcd');
FLUSH logs;
FLUSH logs;
FLUSH logs;
INSERT INTO t1 values(6,'abcd');
INSERT INTO t1 values(7,'abcd');
INSERT INTO t1 values(8,'abcd');
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
INSERT INTO t1 SELECT * FROM t1;
FLUSH logs;
SELECT count(*) FROM t1;
count(*)
544
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` int DEFAULT NULL,
  `c2` char(200) COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
show binary logs;
Log_name	File_size	Encrypted
binlog.000001	#	#
binlog.000002	#	#
binlog.000003	#	#
binlog.000004	#	#
binlog.000005	#	#
binlog.000006	#	#
SELECT distinct Log_name from INFORMATION_SCHEMA.BINLOG_PERSISTENT_FILE_INDEX;
Log_name
binlog.000001
binlog.000002
binlog.000003
binlog.000004
binlog.000005
SELECT Log_slice_key from INFORMATION_SCHEMA.BINLOG_PERSISTENT_FILES order by Log_slice_key;
Log_slice_key
binlog/binlog.000001.00000000000000000002.0000000559
binlog/binlog.000001.00000000000000000002.0000004492
binlog/binlog.000002.00000000000000000002.0000000639
binlog/binlog.000003.00000000000000000002.0000000295
binlog/binlog.000004.00000000000000000002.0000000295
binlog/binlog.000005.00000000000000000002.0000004193
binlog/binlog.000005.00000000000000000002.0000007562
# Puge persistent binlog binlog.000002
SELECT binlog_persistent_purge('binlog.000002');
binlog_persistent_purge('binlog.000002')
Purge binlog persistent files successfully
SELECT distinct Log_name from INFORMATION_SCHEMA.BINLOG_PERSISTENT_FILE_INDEX order by Log_name;
Log_name
binlog.000002
binlog.000003
binlog.000004
binlog.000005
SELECT Log_slice_key from INFORMATION_SCHEMA.BINLOG_PERSISTENT_FILES order by Log_slice_key;
Log_slice_key
binlog/binlog.000002.00000000000000000002.0000000639
binlog/binlog.000003.00000000000000000002.0000000295
binlog/binlog.000004.00000000000000000002.0000000295
binlog/binlog.000005.00000000000000000002.0000004193
binlog/binlog.000005.00000000000000000002.0000007562
show binary logs;
Log_name	File_size	Encrypted
binlog.000001	#	#
binlog.000002	#	#
binlog.000003	#	#
binlog.000004	#	#
binlog.000005	#	#
binlog.000006	#	#
DROP TABLE t1;
DROP DATABASE db1;
