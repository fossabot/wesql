SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
SET SESSION information_schema_stats_expiry=0;
create table t1 (
col1 int not null auto_increment primary key,
col2 varchar(30) not null,
col3 varchar (20) not null,
col4 varchar(4) not null,
col5 enum('PENDING', 'ACTIVE', 'DISABLED') not null,
col6 int not null, to_be_deleted int) ENGINE = SMARTENGINE;
insert into t1 values (2,4,3,5,"PENDING",1,7);
alter table t1
add column col4_5 varchar(20) not null after col4,
add column col7 varchar(30) not null after col5,
add column col8 datetime not null, drop column to_be_deleted,
change column col2 fourth varchar(30) not null after col3,
modify column col6 int not null first;
select * from t1;
col6	col1	col3	fourth	col4	col4_5	col5	col7	col8
1	2	3	4	5		PENDING		0000-00-00 00:00:00
drop table t1;
create table t1 (bandID MEDIUMINT UNSIGNED NOT NULL PRIMARY KEY, payoutID SMALLINT UNSIGNED NOT NULL) ENGINE = SMARTENGINE;
insert into t1 (bandID,payoutID) VALUES (1,6),(2,6),(3,4),(4,9),(5,10),(6,1),(7,12),(8,12);
alter table t1 add column new_col int, order by payoutid,bandid;
Warnings:
Warning	1105	ORDER BY ignored as there is a user-defined clustered index in the table 't1'
select * from t1;
bandID	payoutID	new_col
1	6	NULL
2	6	NULL
3	4	NULL
4	9	NULL
5	10	NULL
6	1	NULL
7	12	NULL
8	12	NULL
alter table t1 order by bandid,payoutid;
Warnings:
Warning	1105	ORDER BY ignored as there is a user-defined clustered index in the table 't1'
select * from t1;
bandID	payoutID	new_col
1	6	NULL
2	6	NULL
3	4	NULL
4	9	NULL
5	10	NULL
6	1	NULL
7	12	NULL
8	12	NULL
drop table t1;
CREATE TABLE t1 (
GROUP_ID int(10) unsigned DEFAULT '0' NOT NULL,
LANG_ID smallint(5) unsigned DEFAULT '0' NOT NULL,
NAME varchar(80) DEFAULT '' NOT NULL,
PRIMARY KEY (GROUP_ID,LANG_ID),
KEY NAME (NAME)) ENGINE = SMARTENGINE;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
ALTER TABLE t1 CHANGE NAME NAME CHAR(80) not null;
SHOW FULL COLUMNS FROM t1;
Field	Type	Collation	Null	Key	Default	Extra	Privileges	Comment
GROUP_ID	int unsigned	NULL	NO	PRI	0		#	
LANG_ID	smallint unsigned	NULL	NO	PRI	0		#	
NAME	char(80)	utf8mb4_general_ci	NO	MUL	NULL		#	
drop table t1;
create table t1 (n int) ENGINE = SMARTENGINE;
insert into t1 values(9),(3),(12),(10);
alter table t1 order by n;
select * from t1;
n
3
9
10
12
drop table t1;
CREATE TABLE t1 (
id int(11) unsigned NOT NULL default '0',
category_id tinyint(4) unsigned NOT NULL default '0',
type_id tinyint(4) unsigned NOT NULL default '0',
body text NOT NULL,
user_id int(11) unsigned NOT NULL default '0',
status enum('new','old') NOT NULL default 'new',
PRIMARY KEY (id)
) ENGINE = SMARTENGINE;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
ALTER TABLE t1 ORDER BY t1.id, t1.status, t1.type_id, t1.user_id, t1.body;
Warnings:
Warning	1105	ORDER BY ignored as there is a user-defined clustered index in the table 't1'
DROP TABLE t1;
CREATE TABLE t1 (AnamneseId int(10) unsigned NOT NULL auto_increment,B BLOB,PRIMARY KEY (AnamneseId)) ENGINE = SMARTENGINE;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
insert into t1 values (null,"hello");
LOCK TABLES t1 WRITE;
ALTER TABLE t1 ADD Column new_col int not null;
UNLOCK TABLES;
OPTIMIZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	optimize	status	OK
DROP TABLE t1;
create table t1 (i int unsigned not null auto_increment primary key) ENGINE = SMARTENGINE;
insert into t1 values (null),(null),(null),(null);
alter table t1 drop i,add i int unsigned not null auto_increment, drop primary key, add primary key (i);
select * from t1;
i
1
2
3
4
drop table t1;
create table t1 (name char(15)) ENGINE = SMARTENGINE;
insert into t1 (name) values ("current");
create database mysqltest;
create table mysqltest.t1 (name char(15));
insert into mysqltest.t1 (name) values ("mysqltest");
select * from t1;
name
current
select * from mysqltest.t1;
name
mysqltest
alter table t1 rename mysqltest.t1;
ERROR 42S01: Table 't1' already exists
select * from t1;
name
current
select * from mysqltest.t1;
name
mysqltest
drop table t1;
drop database mysqltest;
create table t1 (n1 int not null, n2 int, n3 int, n4 float,
unique(n1),
key (n1, n2, n3, n4),
key (n2, n3, n4, n1),
key (n3, n4, n1, n2),
key (n4, n1, n2, n3) ) ENGINE = SMARTENGINE;
alter table t1 disable keys;
Warnings:
Note	1031	Table storage engine for 't1' doesn't have this option
drop table t1;
create table t1 (i int unsigned not null auto_increment primary key) ENGINE = SMARTENGINE;
alter table t1 rename t2;
alter table t2 rename t1, add c char(10) comment "no comment", algorithm=instant;
show columns from t1;
Field	Type	Null	Key	Default	Extra
i	int unsigned	NO	PRI	NULL	auto_increment
c	char(10)	YES		NULL	
drop table t1;
create table t1 (a int, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,100), (2,100), (3, 100);
insert into t1 values(1,99), (2,99), (3, 99);
insert into t1 values(1,98), (2,98), (3, 98);
insert into t1 values(1,97), (2,97), (3, 97);
insert into t1 values(1,96), (2,96), (3, 96);
insert into t1 values(1,95), (2,95), (3, 95);
insert into t1 values(1,94), (2,94), (3, 94);
insert into t1 values(1,93), (2,93), (3, 93);
insert into t1 values(1,92), (2,92), (3, 92);
insert into t1 values(1,91), (2,91), (3, 91);
insert into t1 values(1,90), (2,90), (3, 90);
insert into t1 values(1,89), (2,89), (3, 89);
insert into t1 values(1,88), (2,88), (3, 88);
insert into t1 values(1,87), (2,87), (3, 87);
insert into t1 values(1,86), (2,86), (3, 86);
insert into t1 values(1,85), (2,85), (3, 85);
insert into t1 values(1,84), (2,84), (3, 84);
insert into t1 values(1,83), (2,83), (3, 83);
insert into t1 values(1,82), (2,82), (3, 82);
insert into t1 values(1,81), (2,81), (3, 81);
insert into t1 values(1,80), (2,80), (3, 80);
insert into t1 values(1,79), (2,79), (3, 79);
insert into t1 values(1,78), (2,78), (3, 78);
insert into t1 values(1,77), (2,77), (3, 77);
insert into t1 values(1,76), (2,76), (3, 76);
insert into t1 values(1,75), (2,75), (3, 75);
insert into t1 values(1,74), (2,74), (3, 74);
insert into t1 values(1,73), (2,73), (3, 73);
insert into t1 values(1,72), (2,72), (3, 72);
insert into t1 values(1,71), (2,71), (3, 71);
insert into t1 values(1,70), (2,70), (3, 70);
insert into t1 values(1,69), (2,69), (3, 69);
insert into t1 values(1,68), (2,68), (3, 68);
insert into t1 values(1,67), (2,67), (3, 67);
insert into t1 values(1,66), (2,66), (3, 66);
insert into t1 values(1,65), (2,65), (3, 65);
insert into t1 values(1,64), (2,64), (3, 64);
insert into t1 values(1,63), (2,63), (3, 63);
insert into t1 values(1,62), (2,62), (3, 62);
insert into t1 values(1,61), (2,61), (3, 61);
insert into t1 values(1,60), (2,60), (3, 60);
insert into t1 values(1,59), (2,59), (3, 59);
insert into t1 values(1,58), (2,58), (3, 58);
insert into t1 values(1,57), (2,57), (3, 57);
insert into t1 values(1,56), (2,56), (3, 56);
insert into t1 values(1,55), (2,55), (3, 55);
insert into t1 values(1,54), (2,54), (3, 54);
insert into t1 values(1,53), (2,53), (3, 53);
insert into t1 values(1,52), (2,52), (3, 52);
insert into t1 values(1,51), (2,51), (3, 51);
insert into t1 values(1,50), (2,50), (3, 50);
insert into t1 values(1,49), (2,49), (3, 49);
insert into t1 values(1,48), (2,48), (3, 48);
insert into t1 values(1,47), (2,47), (3, 47);
insert into t1 values(1,46), (2,46), (3, 46);
insert into t1 values(1,45), (2,45), (3, 45);
insert into t1 values(1,44), (2,44), (3, 44);
insert into t1 values(1,43), (2,43), (3, 43);
insert into t1 values(1,42), (2,42), (3, 42);
insert into t1 values(1,41), (2,41), (3, 41);
insert into t1 values(1,40), (2,40), (3, 40);
insert into t1 values(1,39), (2,39), (3, 39);
insert into t1 values(1,38), (2,38), (3, 38);
insert into t1 values(1,37), (2,37), (3, 37);
insert into t1 values(1,36), (2,36), (3, 36);
insert into t1 values(1,35), (2,35), (3, 35);
insert into t1 values(1,34), (2,34), (3, 34);
insert into t1 values(1,33), (2,33), (3, 33);
insert into t1 values(1,32), (2,32), (3, 32);
insert into t1 values(1,31), (2,31), (3, 31);
insert into t1 values(1,30), (2,30), (3, 30);
insert into t1 values(1,29), (2,29), (3, 29);
insert into t1 values(1,28), (2,28), (3, 28);
insert into t1 values(1,27), (2,27), (3, 27);
insert into t1 values(1,26), (2,26), (3, 26);
insert into t1 values(1,25), (2,25), (3, 25);
insert into t1 values(1,24), (2,24), (3, 24);
insert into t1 values(1,23), (2,23), (3, 23);
insert into t1 values(1,22), (2,22), (3, 22);
insert into t1 values(1,21), (2,21), (3, 21);
insert into t1 values(1,20), (2,20), (3, 20);
insert into t1 values(1,19), (2,19), (3, 19);
insert into t1 values(1,18), (2,18), (3, 18);
insert into t1 values(1,17), (2,17), (3, 17);
insert into t1 values(1,16), (2,16), (3, 16);
insert into t1 values(1,15), (2,15), (3, 15);
insert into t1 values(1,14), (2,14), (3, 14);
insert into t1 values(1,13), (2,13), (3, 13);
insert into t1 values(1,12), (2,12), (3, 12);
insert into t1 values(1,11), (2,11), (3, 11);
insert into t1 values(1,10), (2,10), (3, 10);
insert into t1 values(1,9), (2,9), (3, 9);
insert into t1 values(1,8), (2,8), (3, 8);
insert into t1 values(1,7), (2,7), (3, 7);
insert into t1 values(1,6), (2,6), (3, 6);
insert into t1 values(1,5), (2,5), (3, 5);
insert into t1 values(1,4), (2,4), (3, 4);
insert into t1 values(1,3), (2,3), (3, 3);
insert into t1 values(1,2), (2,2), (3, 2);
insert into t1 values(1,1), (2,1), (3, 1);
alter table t1 add unique (a,b), add key (b);
analyze table t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
drop table t1;
create table t1 (a int) ENGINE = SMARTENGINE;
alter table t1 rename to ``;
ERROR 42000: Incorrect table name ''
rename table t1 to ``;
ERROR 42000: Incorrect table name ''
drop table t1;
drop table if exists t1;
Warnings:
Note	1051	Unknown table 'test.t1'
create table t1 ( a varchar(10) not null primary key ) ENGINE = SMARTENGINE;
flush tables;
alter table t1 modify a varchar(10);
flush tables;
alter table t1 modify a varchar(10) not null;
drop table if exists t1;
create table t1 (a int, b int, c int, d int, e int, f int, g int, h int,i int, primary key (a,b,c,d,e,f,g,i,h)) ENGINE = SMARTENGINE;
insert into t1 (a) values(1);
Warnings:
Warning	1364	Field 'b' doesn't have a default value
Warning	1364	Field 'c' doesn't have a default value
Warning	1364	Field 'd' doesn't have a default value
Warning	1364	Field 'e' doesn't have a default value
Warning	1364	Field 'f' doesn't have a default value
Warning	1364	Field 'g' doesn't have a default value
Warning	1364	Field 'h' doesn't have a default value
Warning	1364	Field 'i' doesn't have a default value
alter table t1 modify a int;
drop table t1;
create table t1 (a int not null, b int not null, c int not null, d int not null, e int not null, f int not null, g int not null, h int not null,i int not null, primary key (a,b,c,d,e,f,g,i,h)) ENGINE = SMARTENGINE;
insert into t1 (a) values(1);
Warnings:
Warning	1364	Field 'b' doesn't have a default value
Warning	1364	Field 'c' doesn't have a default value
Warning	1364	Field 'd' doesn't have a default value
Warning	1364	Field 'e' doesn't have a default value
Warning	1364	Field 'f' doesn't have a default value
Warning	1364	Field 'g' doesn't have a default value
Warning	1364	Field 'h' doesn't have a default value
Warning	1364	Field 'i' doesn't have a default value
drop table t1;
create table t1 (myblob longblob,mytext longtext)
default charset latin1 collate latin1_general_cs;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `myblob` longblob,
  `mytext` longtext COLLATE latin1_general_cs
) ENGINE=SMARTENGINE DEFAULT CHARSET=latin1 COLLATE=latin1_general_cs
alter table t1 character set latin2;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `myblob` longblob,
  `mytext` longtext CHARACTER SET latin1 COLLATE latin1_general_cs
) ENGINE=SMARTENGINE DEFAULT CHARSET=latin2
drop table t1;
CREATE TABLE t1 (a int PRIMARY KEY, b INT UNIQUE);
ALTER TABLE t1 DROP PRIMARY KEY;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int NOT NULL,
  `b` int DEFAULT NULL,
  UNIQUE KEY `b` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 DROP PRIMARY KEY;
ERROR 42000: Can't DROP 'PRIMARY'; check that column/key exists
DROP TABLE t1;
create table t1 (a int, b int, key(a));
insert into t1 values (1,1), (2,2);
alter table t1 drop key no_such_key;
ERROR 42000: Can't DROP 'no_such_key'; check that column/key exists
alter table t1 drop key a;
drop table t1;
CREATE TABLE T12207(a int) ENGINE=SMARTENGINE;
ALTER TABLE T12207 DISCARD TABLESPACE;
ERROR HY000: Table storage engine for 'T12207' doesn't have this option
DROP TABLE T12207;
create table t1 ( a timestamp ) ENGINE = SMARTENGINE;
alter table t1 add unique ( a(1) );
ERROR HY000: Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
drop table t1;
create database mysqltest;
create table t1 (c1 int) ENGINE = SMARTENGINE;
alter table t1 rename mysqltest.t1;
drop table t1;
ERROR 42S02: Unknown table 'test.t1'
alter table mysqltest.t1 rename t1;
drop table t1;
create table t1 (c1 int) ENGINE = SMARTENGINE;
use mysqltest;
drop database mysqltest;
alter table test.t1 rename t1;
ERROR 3D000: No database selected
alter table test.t1 rename test.t1;
use test;
drop table t1;
create table table_24562(
section int,
subsection int,
title varchar(50)) ENGINE = SMARTENGINE;
insert into table_24562 values
(1, 0, "Introduction"),
(1, 1, "Authors"),
(1, 2, "Acknowledgements"),
(2, 0, "Basics"),
(2, 1, "Syntax"),
(2, 2, "Client"),
(2, 3, "Server"),
(3, 0, "Intermediate"),
(3, 1, "Complex queries"),
(3, 2, "Stored Procedures"),
(3, 3, "Stored Functions"),
(4, 0, "Advanced"),
(4, 1, "Replication"),
(4, 2, "Load balancing"),
(4, 3, "High availability"),
(5, 0, "Conclusion");
select * from table_24562;
section	subsection	title
1	0	Introduction
1	1	Authors
1	2	Acknowledgements
2	0	Basics
2	1	Syntax
2	2	Client
2	3	Server
3	0	Intermediate
3	1	Complex queries
3	2	Stored Procedures
3	3	Stored Functions
4	0	Advanced
4	1	Replication
4	2	Load balancing
4	3	High availability
5	0	Conclusion
alter table table_24562 add column reviewer varchar(20),
order by title;
select * from table_24562;
section	subsection	title	reviewer
1	2	Acknowledgements	NULL
4	0	Advanced	NULL
1	1	Authors	NULL
2	0	Basics	NULL
2	2	Client	NULL
3	1	Complex queries	NULL
5	0	Conclusion	NULL
4	3	High availability	NULL
3	0	Intermediate	NULL
1	0	Introduction	NULL
4	2	Load balancing	NULL
4	1	Replication	NULL
2	3	Server	NULL
3	3	Stored Functions	NULL
3	2	Stored Procedures	NULL
2	1	Syntax	NULL
update table_24562 set reviewer="Me" where section=2;
update table_24562 set reviewer="You" where section=3;
alter table table_24562
order by section ASC, subsection DESC;
select * from table_24562;
section	subsection	title	reviewer
1	2	Acknowledgements	NULL
1	1	Authors	NULL
1	0	Introduction	NULL
2	3	Server	Me
2	2	Client	Me
2	1	Syntax	Me
2	0	Basics	Me
3	3	Stored Functions	You
3	2	Stored Procedures	You
3	1	Complex queries	You
3	0	Intermediate	You
4	3	High availability	NULL
4	2	Load balancing	NULL
4	1	Replication	NULL
4	0	Advanced	NULL
5	0	Conclusion	NULL
alter table table_24562
order by table_24562.subsection ASC, table_24562.section DESC;
select * from table_24562;
section	subsection	title	reviewer
5	0	Conclusion	NULL
4	0	Advanced	NULL
3	0	Intermediate	You
2	0	Basics	Me
1	0	Introduction	NULL
4	1	Replication	NULL
3	1	Complex queries	You
2	1	Syntax	Me
1	1	Authors	NULL
4	2	Load balancing	NULL
3	2	Stored Procedures	You
2	2	Client	Me
1	2	Acknowledgements	NULL
4	3	High availability	NULL
3	3	Stored Functions	You
2	3	Server	Me
alter table table_24562 order by 12;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '12' at line 1
alter table table_24562 order by (section + 12);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(section + 12)' at line 1
alter table table_24562 order by length(title);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(title)' at line 1
alter table table_24562 order by (select 12 from dual);
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(select 12 from dual)' at line 1
alter table table_24562 order by no_such_col;
ERROR 42S22: Unknown column 'no_such_col' in 'order clause'
drop table table_24562;
create table t1 (mycol int(10) not null) ENGINE = SMARTENGINE;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
alter table t1 alter column mycol set default 0;
desc t1;
Field	Type	Null	Key	Default	Extra
mycol	int	NO		0	
drop table t1;
set sql_mode= "ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION";
create table t1(f1 int) ENGINE = SMARTENGINE;
alter table t1 add column f2 datetime not null, add column f21 date not null;
insert into t1 values(1,'2000-01-01','2000-01-01');
alter table t1 add column f3 datetime not null;
ERROR 22007: Incorrect datetime value: '0000-00-00 00:00:00' for column 'f3' at row 1
alter table t1 add column f3 date not null;
ERROR 22007: Incorrect date value: '0000-00-00' for column 'f3' at row 1
alter table t1 add column f4 datetime not null default '2002-02-02',
add column f41 date not null;
ERROR 22007: Incorrect date value: '0000-00-00' for column 'f41' at row 1
alter table t1 add column f4 datetime not null default '2002-02-02',
add column f41 date not null default '2002-02-02';
select * from t1;
f1	f2	f21	f4	f41
1	2000-01-01 00:00:00	2000-01-01	2002-02-02 00:00:00	2002-02-02
drop table t1;
create table t1 (v varchar(32)) ENGINE = SMARTENGINE;
insert into t1 values ('def'),('abc'),('hij'),('3r4f');
select * from t1;
v
def
abc
hij
3r4f
alter table t1 change v v2 varchar(32);
select * from t1;
v2
def
abc
hij
3r4f
alter table t1 change v2 v varchar(64);
select * from t1;
v
def
abc
hij
3r4f
update t1 set v = 'lmn' where v = 'hij';
select * from t1;
v
def
abc
lmn
3r4f
alter table t1 add i int auto_increment not null primary key first;
select * from t1;
i	v
1	def
2	abc
3	lmn
4	3r4f
update t1 set i=5 where i=3;
select * from t1;
i	v
1	def
2	abc
4	3r4f
5	lmn
alter table t1 change i i bigint;
select * from t1;
i	v
1	def
2	abc
4	3r4f
5	lmn
alter table t1 add unique key (i, v);
select * from t1 where i between 2 and 4 and v in ('def','3r4f','lmn');
i	v
4	3r4f
drop table t1;
CREATE TABLE t1 (s CHAR(8) BINARY);
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
INSERT INTO t1 VALUES ('test');
SELECT LENGTH(s) FROM t1;
LENGTH(s)
4
ALTER TABLE t1 MODIFY s CHAR(10) BINARY;
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
SELECT LENGTH(s) FROM t1;
LENGTH(s)
4
DROP TABLE t1;
CREATE TABLE t1 (s BINARY(8));
INSERT INTO t1 VALUES ('test');
SELECT LENGTH(s) FROM t1;
LENGTH(s)
8
SELECT HEX(s) FROM t1;
HEX(s)
7465737400000000
ALTER TABLE t1 MODIFY s BINARY(10);
SELECT HEX(s) FROM t1;
HEX(s)
74657374000000000000
SELECT LENGTH(s) FROM t1;
LENGTH(s)
10
DROP TABLE t1;
CREATE TABLE t1 (v VARCHAR(3), b INT);
INSERT INTO t1 VALUES ('abc', 5);
SELECT * FROM t1;
v	b
abc	5
ALTER TABLE t1 MODIFY COLUMN v VARCHAR(4);
SELECT * FROM t1;
v	b
abc	5
DROP TABLE t1;
create table t1 (a tinytext character set latin1);
alter table t1 convert to character set utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb3
drop table t1;
create table t1 (a mediumtext character set latin1);
alter table t1 convert to character set utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb3
drop table t1;
create table t1 (i int);
create table t3 (j int);
insert into t1 values ();
insert into t3 values ();
lock table t1 write, t3 read;
alter table t1 modify i int default 1;
insert into t1 values ();
select * from t1;
i
NULL
1
alter table t1 change i c char(10) default "Two";
insert into t1 values ();
select * from t1;
c
NULL
1
Two
alter table t1 modify c char(10) default "Three", rename to t2;
select * from t1;
ERROR HY000: Table 't1' was not locked with LOCK TABLES
select * from t2;
c
NULL
1
Two
select * from t3;
j
NULL
unlock tables;
insert into t2 values ();
select * from t2;
c
NULL
1
Two
Three
lock table t2 write, t3 read;
alter table t2 change c vc varchar(100) default "Four", rename to t1;
select * from t1;
vc
NULL
1
Two
Three
select * from t2;
ERROR HY000: Table 't2' was not locked with LOCK TABLES
select * from t3;
j
NULL
unlock tables;
insert into t1 values ();
select * from t1;
vc
NULL
1
Two
Three
Four
drop tables t1, t3;
CREATE TABLE `t+1` (c1 INT);
ALTER TABLE  `t+1` RENAME `t+2`;
CREATE TABLE `t+1` (c1 INT);
ALTER TABLE  `t+1` RENAME `t+2`;
ERROR 42S01: Table 't+2' already exists
DROP TABLE   `t+1`, `t+2`;
CREATE TEMPORARY TABLE `tt+1` (c1 INT);
ALTER TABLE  `tt+1` RENAME `tt+2`;
CREATE TEMPORARY TABLE `tt+1` (c1 INT);
ALTER TABLE  `tt+1` RENAME `tt+2`;
ERROR 42S01: Table 'tt+2' already exists
SHOW CREATE TABLE `tt+1`;
Table	Create Table
tt+1	CREATE TEMPORARY TABLE `tt+1` (
  `c1` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
SHOW CREATE TABLE `tt+2`;
Table	Create Table
tt+2	CREATE TEMPORARY TABLE `tt+2` (
  `c1` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
DROP TABLE   `tt+1`, `tt+2`;
CREATE TABLE `#sql1` (c1 INT);
CREATE TABLE `@0023sql2` (c1 INT);
SHOW TABLES;
Tables_in_test
#sql1
@0023sql2
RENAME TABLE `#sql1`     TO `@0023sql1`;
RENAME TABLE `@0023sql2` TO `#sql2`;
SHOW TABLES;
Tables_in_test
#sql2
@0023sql1
ALTER TABLE `@0023sql1`  RENAME `#sql-1`;
ALTER TABLE `#sql2`      RENAME `@0023sql-2`;
SHOW TABLES;
Tables_in_test
#sql-1
@0023sql-2
INSERT INTO `#sql-1`     VALUES (1);
INSERT INTO `@0023sql-2` VALUES (2);
DROP TABLE `#sql-1`, `@0023sql-2`;
CREATE TEMPORARY TABLE `#sql1` (c1 INT);
CREATE TEMPORARY TABLE `@0023sql2` (c1 INT);
SHOW TABLES;
Tables_in_test
ALTER TABLE `#sql1`      RENAME `@0023sql1`;
ALTER TABLE `@0023sql2`  RENAME `#sql2`;
SHOW TABLES;
Tables_in_test
INSERT INTO `#sql2`      VALUES (1);
INSERT INTO `@0023sql1`  VALUES (2);
SHOW CREATE TABLE `#sql2`;
Table	Create Table
#sql2	CREATE TEMPORARY TABLE `#sql2` (
  `c1` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
SHOW CREATE TABLE `@0023sql1`;
Table	Create Table
@0023sql1	CREATE TEMPORARY TABLE `@0023sql1` (
  `c1` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
DROP TABLE `#sql2`, `@0023sql1`;
CREATE TABLE t1 (
int_field INTEGER UNSIGNED NOT NULL,
char_field CHAR(10),
INDEX(`int_field`)
);
DESCRIBE t1;
Field	Type	Null	Key	Default	Extra
int_field	int unsigned	NO	MUL	NULL	
char_field	char(10)	YES		NULL	
SHOW INDEXES FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	int_field	1	int_field	A	0	NULL	NULL		SE_SPECIFIC			YES	NULL
INSERT INTO t1 VALUES (1, "edno"), (1, "edno"), (2, "dve"), (3, "tri"), (5, "pet");
ALTER TABLE t1
CHANGE int_field unsigned_int_field INTEGER UNSIGNED NOT NULL,
RENAME t2;
SELECT * FROM t1 ORDER BY int_field;
ERROR 42S02: Table 'test.t1' doesn't exist
SELECT * FROM t2 ORDER BY unsigned_int_field;
unsigned_int_field	char_field
1	edno
1	edno
2	dve
3	tri
5	pet
DESCRIBE t2;
Field	Type	Null	Key	Default	Extra
unsigned_int_field	int unsigned	NO	MUL	NULL	
char_field	char(10)	YES		NULL	
DESCRIBE t2;
Field	Type	Null	Key	Default	Extra
unsigned_int_field	int unsigned	NO	MUL	NULL	
char_field	char(10)	YES		NULL	
ALTER TABLE t2 MODIFY unsigned_int_field BIGINT UNSIGNED NOT NULL;
DESCRIBE t2;
Field	Type	Null	Key	Default	Extra
unsigned_int_field	bigint unsigned	NO	MUL	NULL	
char_field	char(10)	YES		NULL	
DROP TABLE t2;
CREATE TABLE t1 (f1 INT, f2 INT, f3 INT);
INSERT INTO t1 VALUES (1, 2, NULL);
SELECT * FROM t1;
f1	f2	f3
1	2	NULL
ALTER TABLE t1 MODIFY COLUMN f3 INT AFTER f1;
SELECT * FROM t1;
f1	f3	f2
1	NULL	2
ALTER TABLE t1 MODIFY COLUMN f3 INT AFTER f2;
SELECT * FROM t1;
f1	f2	f3
1	2	NULL
DROP TABLE t1;
create table t1 (c char(10) default "Two");
lock table t1 write;
insert into t1 values ();
alter table t1 modify c char(10) default "Three";
unlock tables;
select * from t1;
c
Two
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	status	OK
drop table t1;
CREATE TABLE t1 (id int, c int) character set latin1;
INSERT INTO t1 VALUES (1,1);
ALTER TABLE t1 CHANGE c d int;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 CHANGE d c int;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 MODIFY c VARCHAR(10);
affected rows: 1
info: Records: 1  Duplicates: 0  Warnings: 0
ALTER TABLE t1 CHANGE c d varchar(10);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 CHANGE d c varchar(10);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
DROP TABLE t1;
CREATE TABLE t1 (id int, c int) character set utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
INSERT INTO t1 VALUES (1,1);
ALTER TABLE t1 CHANGE c d int;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 CHANGE d c int;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 MODIFY c VARCHAR(10);
affected rows: 1
info: Records: 1  Duplicates: 0  Warnings: 0
ALTER TABLE t1 CHANGE c d varchar(10);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 CHANGE d c varchar(10);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
DROP TABLE t1;
CREATE TABLE t1(a INT AUTO_INCREMENT PRIMARY KEY,
b ENUM('a', 'b', 'c') NOT NULL);
INSERT INTO t1 (b) VALUES ('a'), ('c'), ('b'), ('b'), ('a');
ALTER TABLE t1 MODIFY b ENUM('a', 'z', 'b', 'c') NOT NULL;
SELECT * FROM t1;
a	b
1	a
2	c
3	b
4	b
5	a
DROP TABLE t1;
#
# Bug#45567: Fast ALTER TABLE broken for enum and set
#
CREATE TABLE t1 (a ENUM('a1','a2'));
INSERT INTO t1 VALUES ('a1'),('a2');
# No copy: No modification
ALTER TABLE t1 MODIFY COLUMN a ENUM('a1','a2');
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
# No copy: Add new enumeration to the end
ALTER TABLE t1 MODIFY COLUMN a ENUM('a1','a2','a3');
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
# Copy: Modify and add new to the end
ALTER TABLE t1 MODIFY COLUMN a ENUM('a1','a2','xx','a5');
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
# Copy: Remove from the end
ALTER TABLE t1 MODIFY COLUMN a ENUM('a1','a2','xx');
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
# Copy: Add new enumeration
ALTER TABLE t1 MODIFY COLUMN a ENUM('a1','a2','a0','xx');
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
# No copy: Add new enumerations to the end
ALTER TABLE t1 MODIFY COLUMN a ENUM('a1','a2','a0','xx','a5','a6');
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
DROP TABLE t1;
CREATE TABLE t1 (a SET('a1','a2'));
INSERT INTO t1 VALUES ('a1'),('a2');
# No copy: No modification
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2');
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
# No copy: Add new to the end
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','a3');
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
# Copy: Modify and add new to the end
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','xx','a5');
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
# Copy: Remove from the end
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','xx');
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
# Copy: Add new member
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','a0','xx');
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
# No copy: Add new to the end
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','a0','xx','a5','a6');
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
# Copy: Numerical increase (pack length)
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','a0','xx','a5','a6','a7','a8','a9','a10');
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
DROP TABLE t1;
CREATE TABLE t1 (f1 TIMESTAMP NULL DEFAULT NULL,
f2 INT(11) DEFAULT NULL) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
INSERT INTO t1 VALUES (NULL, NULL), ("2009-10-09 11:46:19", 2);
this should affect no rows as there is no real change
ALTER TABLE t1 CHANGE COLUMN f1 f1_no_real_change TIMESTAMP NULL DEFAULT NULL;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
DROP TABLE t1;
#
# Bug #31145: ALTER TABLE DROP COLUMN, ADD COLUMN crashes (linux)
#   or freezes (win) the server
#
CREATE TABLE t1 (a TEXT, id INT, b INT);
ALTER TABLE t1 DROP COLUMN a, ADD COLUMN c TEXT FIRST;
DROP TABLE t1;
#
# Test for bug #12652385 - "61493: REORDERING COLUMNS TO POSITION
#                           FIRST CAN CAUSE DATA TO BE CORRUPTED".
#
# Use X-Engine engine as the fact that InnoDB doesn't support
# in-place ALTER TABLE in cases when columns are being renamed
# hides some bugs.
create table t1 (i int, j int) ENGINE = SMARTENGINE;
insert into t1 value (1, 2);
# First, test for original problem described in the bug report.
select * from t1;
i	j
1	2
# Change of column order by the below ALTER TABLE statement should
# affect both column names and column contents.
alter table t1 modify column j int first;
select * from t1;
j	i
2	1
# Now test for similar problem with the same root.
# The below ALTER TABLE should change not only the name but
# also the value for the last column of the table.
alter table t1 drop column i, add column k int default 0;
select * from t1;
j	k
2	0
# Clean-up.
drop table t1;
CREATE TABLE t1(c CHAR(10),
i INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY);
INSERT INTO t1 VALUES('a',2),('b',4),('c',6);
ALTER TABLE t1
DROP i,
ADD i INT UNSIGNED NOT NULL AUTO_INCREMENT,
AUTO_INCREMENT = 1;
DROP TABLE t1;
CREATE TABLE t1 (a CHAR(1), PRIMARY KEY (a(255)));
ERROR HY000: Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
CREATE TABLE t1 (a CHAR(1));
ALTER TABLE t1 ADD PRIMARY KEY (a(20));
ERROR HY000: Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
ALTER TABLE t1 ADD KEY (a(20));
ERROR HY000: Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
CREATE UNIQUE INDEX i1 ON t1 (a(20));
ERROR HY000: Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
CREATE INDEX i2 ON t1 (a(20));
ERROR HY000: Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
DROP TABLE t1;
#
# Bug#11754461 CANNOT ALTER TABLE WHEN KEY PREFIX TOO LONG
#
CREATE DATABASE db1 CHARACTER SET utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
CREATE TABLE db1.t1 (bar TINYTEXT, KEY (bar(100)));
ERROR 42000: Specified key was too long; max key length is 255 bytes
CREATE TABLE db1.t1 (bar TINYTEXT, KEY (bar(85)));
ALTER TABLE db1.t1 ADD baz INT;
DROP DATABASE db1;
#
# Bug#11938039 RE-EXECUTION OF FRM-ONLY ALTER TABLE WITH RENAME
#              CLAUSE FAILS OR ABORTS SERVER.
#
create table t1 (a int);
prepare stmt1 from 'alter table t1 alter column a set default 1, rename to t2';
execute stmt1;
rename table t2 to t1;
# The below statement should succeed and not emit error or abort server.
execute stmt1;
deallocate prepare stmt1;
drop table t2;
# Bug#11748057 (formerly known as 34972): ALTER TABLE statement doesn't
#                                         identify correct column name.
#
CREATE TABLE t1 (c1 int unsigned , c2 char(100) not null default '');
ALTER TABLE t1 ADD c3 char(16) NOT NULL DEFAULT '' AFTER c2,
MODIFY c2 char(100) NOT NULL DEFAULT '' AFTER c1;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` int unsigned DEFAULT NULL,
  `c2` char(100) COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `c3` char(16) COLLATE utf8mb4_general_ci NOT NULL DEFAULT ''
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
DROP TABLE t1;
#
# WL#5534 Online ALTER, Phase 1
#
# Single thread tests.
# See innodb_mysql_sync.test for multi thread tests.
CREATE TABLE t1(a INT PRIMARY KEY, b INT) ENGINE = SMARTENGINE;
CREATE TABLE m1(a INT PRIMARY KEY, b INT) ENGINE=SMARTENGINE;
INSERT INTO t1 VALUES (1,1), (2,2);
INSERT INTO m1 VALUES (1,1), (2,2);
#
# 1: Test ALGORITHM keyword
#
# --enable_info allows us to see how many rows were updated
# by ALTER TABLE. in-place will show 0 rows, while copy > 0.
ALTER TABLE t1 ADD INDEX i1(b);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 ADD INDEX i2(b), ALGORITHM= DEFAULT;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i2' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i3(b), ALGORITHM= COPY;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i3' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i4(b), ALGORITHM= INPLACE;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i4' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i5(b), ALGORITHM= INVALID;
ERROR HY000: Unknown ALGORITHM 'INVALID'
ALTER TABLE m1 ENABLE KEYS;
affected rows: 0
Warnings:
Note	1031	Table storage engine for 'm1' doesn't have this option
ALTER TABLE m1 ENABLE KEYS, ALGORITHM= DEFAULT;
affected rows: 0
Warnings:
Note	1031	Table storage engine for 'm1' doesn't have this option
ALTER TABLE m1 ENABLE KEYS, ALGORITHM= INPLACE;
affected rows: 0
Warnings:
Note	1031	Table storage engine for 'm1' doesn't have this option
ALTER TABLE t1 DROP INDEX i1, DROP INDEX i2, DROP INDEX i3, DROP INDEX i4;
#
# 2: Test ALGORITHM + old_alter_table
#
SET SESSION old_alter_table= 1;
affected rows: 0
ALTER TABLE t1 ADD INDEX i1(b);
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE t1 ADD INDEX i2(b), ALGORITHM= DEFAULT;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i2' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i3(b), ALGORITHM= COPY;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i3' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i4(b), ALGORITHM= INPLACE;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i4' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
SET SESSION old_alter_table= 0;
affected rows: 0
ALTER TABLE t1 DROP INDEX i1, DROP INDEX i2, DROP INDEX i3, DROP INDEX i4;
#
# 3: Test unsupported in-place operation
#
ALTER TABLE t1 ADD COLUMN (c1 INT);
ALTER TABLE t1 ADD COLUMN (c2 INT), ALGORITHM= DEFAULT;
ALTER TABLE t1 ADD COLUMN (c3 INT), ALGORITHM= COPY;
ALTER TABLE t1 ADD COLUMN (c4 INT), ALGORITHM= INSTANT;
ALTER TABLE t1 DROP COLUMN c1, DROP COLUMN c2, DROP COLUMN c3, DROP COLUMN c4;
#
# 4: Test LOCK keyword
#
ALTER TABLE t1 ADD INDEX i1(b), LOCK= DEFAULT;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 ADD INDEX i2(b), LOCK= SHARED;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i2' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i3(b), LOCK= SHARED;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i3' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i4(b), LOCK= EXCLUSIVE;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i4' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i5(b), LOCK= INVALID;
ERROR HY000: Unknown LOCK type 'INVALID'
ALTER TABLE m1 ENABLE KEYS, LOCK= DEFAULT;
Warnings:
Note	1031	Table storage engine for 'm1' doesn't have this option
ALTER TABLE m1 ENABLE KEYS, LOCK= NONE;
ERROR 0A000: LOCK=NONE/SHARED is not supported for this operation. Try LOCK=EXCLUSIVE.
ALTER TABLE m1 ENABLE KEYS, LOCK= SHARED;
ERROR 0A000: LOCK=NONE/SHARED is not supported for this operation. Try LOCK=EXCLUSIVE.
ALTER TABLE m1 ENABLE KEYS, LOCK= EXCLUSIVE;
Warnings:
Note	1031	Table storage engine for 'm1' doesn't have this option
ALTER TABLE t1 DROP INDEX i1, DROP INDEX i2, DROP INDEX i3, DROP INDEX i4;
#
# 5: Test ALGORITHM + LOCK
#
ALTER TABLE t1 ADD INDEX i1(b), ALGORITHM= INPLACE, LOCK= SHARED;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE t1 ADD INDEX i2(b), ALGORITHM= INPLACE, LOCK= SHARED;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i2' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i3(b), ALGORITHM= INPLACE, LOCK= EXCLUSIVE;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i3' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i4(b), ALGORITHM= COPY, LOCK= NONE;
ERROR 0A000: LOCK=NONE is not supported. Reason: COPY algorithm requires a lock. Try LOCK=SHARED.
ALTER TABLE t1 ADD INDEX i5(b), ALGORITHM= COPY, LOCK= SHARED;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i5' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
ALTER TABLE t1 ADD INDEX i6(b), ALGORITHM= COPY, LOCK= EXCLUSIVE;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 1
Warnings:
Warning	1831	Duplicate index 'i6' defined on the table 'test.t1'. This is deprecated and will be disallowed in a future release.
DROP TABLE t1, m1;
affected rows: 0
#
# 6: Possible deadlock involving thr_lock.c
#
CREATE TABLE t1(a INT PRIMARY KEY, b INT) ENGINE = SMARTENGINE;
affected rows: 0
INSERT INTO t1 VALUES (1,1), (2,2);
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
START TRANSACTION;
affected rows: 0
INSERT INTO t1 VALUES (3,3);
affected rows: 1
# Connection con1
# Sending:
ALTER TABLE t1 DISABLE KEYS;
# Connection default
# Waiting until ALTER TABLE is blocked.
UPDATE t1 SET b = 4;
affected rows: 3
info: Rows matched: 3  Changed: 3  Warnings: 0
COMMIT;
affected rows: 0
# Connection con1
# Reaping: ALTER TABLE t1 DISABLE KEYS
affected rows: 0
Warnings:
Note	1031	Table storage engine for 't1' doesn't have this option
# Connection default
DROP TABLE t1;
affected rows: 0
#
# 7: Which operations require copy and which can be done in-place?
#
# Test which ALTER TABLE operations are done in-place and
# which operations are done using temporary table copy.
#
# --enable_info allows us to see how many rows were updated
# by ALTER TABLE. in-place will show 0 rows, while copy > 0.
#
# Single operation tests
CREATE TABLE ti1(a INT NOT NULL, b INT, c INT) ENGINE = SMARTENGINE;
affected rows: 0
CREATE TABLE tm1(a INT NOT NULL, b INT, c INT) ENGINE=SMARTENGINE;
affected rows: 0
CREATE TABLE ti2(a INT PRIMARY KEY AUTO_INCREMENT, b INT, c INT) ENGINE = SMARTENGINE;
affected rows: 0
CREATE TABLE tm2(a INT PRIMARY KEY AUTO_INCREMENT, b INT, c INT) ENGINE=SMARTENGINE;
affected rows: 0
INSERT INTO ti1 VALUES (1,1,1), (2,2,2);
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
INSERT INTO ti2 VALUES (1,1,1), (2,2,2);
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
INSERT INTO tm1 VALUES (1,1,1), (2,2,2);
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
INSERT INTO tm2 VALUES (1,1,1), (2,2,2);
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1;
affected rows: 0
ALTER TABLE tm1;
affected rows: 0
ALTER TABLE ti1 ADD COLUMN d VARCHAR(200);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ADD COLUMN d VARCHAR(200);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 ADD COLUMN d2 VARCHAR(200);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ADD COLUMN d2 VARCHAR(200);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 ADD COLUMN e ENUM('a', 'b') FIRST;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ADD COLUMN e ENUM('a', 'b') FIRST;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 ADD COLUMN f INT AFTER a;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ADD COLUMN f INT AFTER a;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 ADD INDEX ii1(b);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ADD INDEX im1(b);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 ADD UNIQUE INDEX ii2 (c);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ADD UNIQUE INDEX im2 (c);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 ADD PRIMARY KEY(a);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ADD PRIMARY KEY(a);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 DROP COLUMN d2;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 DROP COLUMN d2;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 ALTER COLUMN b SET DEFAULT 1, algorithm=instant;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ALTER COLUMN b SET DEFAULT 1, algorithm=instant;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 ALTER COLUMN b DROP DEFAULT, algorithm=instant;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ALTER COLUMN b DROP DEFAULT, algorithm=instant;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 CHANGE COLUMN f g INT;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 CHANGE COLUMN f g INT;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 CHANGE COLUMN g h VARCHAR(20);
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 CHANGE COLUMN g h VARCHAR(20);
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MODIFY COLUMN e ENUM('a', 'b', 'c');
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MODIFY COLUMN e ENUM('a', 'b', 'c');
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MODIFY COLUMN e INT;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MODIFY COLUMN e INT;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MODIFY COLUMN e INT AFTER h;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MODIFY COLUMN e INT AFTER h;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MODIFY COLUMN e INT FIRST;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MODIFY COLUMN e INT FIRST;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MODIFY COLUMN c INT NOT NULL;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MODIFY COLUMN c INT NOT NULL;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MODIFY COLUMN c INT NULL;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MODIFY COLUMN c INT NULL;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MODIFY COLUMN h VARCHAR(30);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MODIFY COLUMN h VARCHAR(30);
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MODIFY COLUMN h VARCHAR(30) AFTER d;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MODIFY COLUMN h VARCHAR(30) AFTER d;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 DROP COLUMN h;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 DROP COLUMN h;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 DROP INDEX ii2;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 DROP INDEX im2;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 DROP PRIMARY KEY;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 DROP PRIMARY KEY;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 DROP FOREIGN KEY fi1;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 DROP FOREIGN KEY fm1;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 RENAME TO ti3;
affected rows: 0
ALTER TABLE tm1 RENAME TO tm3;
affected rows: 0
ALTER TABLE ti3 RENAME TO ti1;
affected rows: 0
ALTER TABLE tm3 RENAME TO tm1;
affected rows: 0
ALTER TABLE ti1 ORDER BY b;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 ORDER BY b;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 CONVERT TO CHARACTER SET utf16;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 CONVERT TO CHARACTER SET utf16;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 DEFAULT CHARACTER SET utf8;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 1
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
ALTER TABLE tm1 DEFAULT CHARACTER SET utf8;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 1
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
ALTER TABLE ti1 FORCE;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 FORCE;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 AUTO_INCREMENT 3;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 AUTO_INCREMENT 3;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 AVG_ROW_LENGTH 10;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 AVG_ROW_LENGTH 10;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 CHECKSUM 1;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 CHECKSUM 1;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 COMMENT 'test';
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 COMMENT 'test';
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MAX_ROWS 100;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MAX_ROWS 100;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 MIN_ROWS 1;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 MIN_ROWS 1;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE ti1 PACK_KEYS 1;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
ALTER TABLE tm1 PACK_KEYS 1;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
DROP TABLE ti1, ti2, tm1, tm2;
# Tests of >1 operation (X-Engine)
CREATE TABLE ti1(a INT PRIMARY KEY AUTO_INCREMENT, b INT) ENGINE = SMARTENGINE;
INSERT INTO ti1(b) VALUES (1), (2);
ALTER TABLE ti1 RENAME TO ti3, ADD INDEX ii1(b), ALGORITHM=INPLACE;
affected rows: 0
info: Records: 0  Duplicates: 0  Warnings: 0
ALTER TABLE ti3 DROP INDEX ii1, AUTO_INCREMENT 5;
affected rows: 2
info: Records: 2  Duplicates: 0  Warnings: 0
INSERT INTO ti3(b) VALUES (5);
ALTER TABLE ti3 ADD INDEX ii1(b), AUTO_INCREMENT 7;
affected rows: 3
info: Records: 3  Duplicates: 0  Warnings: 0
INSERT INTO ti3(b) VALUES (7);
SELECT * FROM ti3;
a	b
1	1
2	2
5	5
7	7
DROP TABLE ti3;
#
# 8: Scenario in which ALTER TABLE was returning an unwarranted
#    ER_ILLEGAL_HA error at some point during work on this WL.
#
CREATE TABLE tm1(i INT DEFAULT 1) ENGINE = SMARTENGINE;
ALTER TABLE tm1 ADD INDEX ii1(i), ALTER COLUMN i DROP DEFAULT;
DROP TABLE tm1;
#
# Tests for WL#6555 "Online rename index".
#
#
# 1) Tests for syntax and semantics of ALTER TABLE RENAME
#    KEY/INDEX result.
#
# 1.a) Both RENAME KEY and RENAME INDEX variants should be
#      allowed and produce expected results.
create table t1 (pk int primary key, i int, j int, key a(i));
alter table t1 rename key a to b;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `b` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 rename index b to c;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# 1.b) It should be impossible to rename index that doesn't
#      exists, dropped or added within the same ALTER TABLE.
alter table t1 rename key d to e;
ERROR 42000: Key 'd' doesn't exist in table 't1'
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 drop key c, rename key c to d;
ERROR 42000: Key 'c' doesn't exist in table 't1'
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 add key d(j), rename key d to e;
ERROR 42000: Key 'd' doesn't exist in table 't1'
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# 1.c) It should be impossible to rename index to a name
#      which is already used by another index, or is used
#      by index which is added within the same ALTER TABLE.
alter table t1 add key d(j);
alter table t1 rename key c to d;
ERROR 42000: Duplicate key name 'd'
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`i`),
  KEY `d` (`j`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 drop key d;
alter table t1 add key d(j), rename key c to d;
ERROR 42000: Duplicate key name 'd'
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# 1.d) It should be possible to rename index to a name
#      which belongs to index which is dropped within the
#      same ALTER TABLE.
alter table t1 add key d(j);
alter table t1 drop key c, rename key d to c;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`j`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# 1.e) We disallow renaming from/to PRIMARY as it might
#      lead to some other key becoming "primary" internally,
#      which will be interpreted as dropping/addition of
#      primary key.
alter table t1 rename key primary to d;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'primary to d' at line 1
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`j`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# Even using 'funny' syntax.
alter table t1 rename key `primary` to d;
ERROR 42000: Incorrect index name 'primary'
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`j`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 rename key c to primary;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'primary' at line 1
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`j`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 rename key c to `primary`;
ERROR 42000: Incorrect index name 'primary'
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `pk` int NOT NULL,
  `i` int DEFAULT NULL,
  `j` int DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `c` (`j`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
drop table t1;
#
# 2) More complex tests for semantics of ALTER TABLE.
#
# 2.a) Check that standalone RENAME KEY works as expected
#      for unique and non-unique indexes.
create table t1 (a int, unique u(a), b int, key k(b));
alter table t1 rename key u to uu;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  UNIQUE KEY `uu` (`a`),
  KEY `k` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 rename key k to kk;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  UNIQUE KEY `uu` (`a`),
  KEY `kk` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# 2.b) Check how that this clause can be mixed with other
#      clauses which don't affect key or its columns.
alter table t1 rename key kk to kkk, add column c int;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  `c` int DEFAULT NULL,
  UNIQUE KEY `uu` (`a`),
  KEY `kkk` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 rename key uu to uuu, add key c(c);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  `c` int DEFAULT NULL,
  UNIQUE KEY `uuu` (`a`),
  KEY `kkk` (`b`),
  KEY `c` (`c`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 rename key kkk to k, drop key uuu;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  `c` int DEFAULT NULL,
  KEY `k` (`b`),
  KEY `c` (`c`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t1 rename key k to kk, rename to t2;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  `c` int DEFAULT NULL,
  KEY `kk` (`b`),
  KEY `c` (`c`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# 2.c) Check that this clause properly works even in case
#      when it is mixed with clauses affecting columns in
#      the key renamed.
alter table t2 rename key c to cc, modify column c bigint not null first;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `c` bigint NOT NULL,
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  KEY `kk` (`b`),
  KEY `cc` (`c`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# Create multi-component key for next example.
alter table t2 add unique u (a, b, c);
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `c` bigint NOT NULL,
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  UNIQUE KEY `u` (`a`,`b`,`c`),
  KEY `kk` (`b`),
  KEY `cc` (`c`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
alter table t2 rename key u to uu, drop column b;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `c` bigint NOT NULL,
  `a` int DEFAULT NULL,
  UNIQUE KEY `uu` (`a`,`c`),
  KEY `cc` (`c`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
drop table t2;
#
# 3) Test coverage for handling of RENAME INDEX clause in
#    various storage engines and using different ALTER
#    algorithm.
#
# 3.b) Basic tests for InnoDB. More tests can be found in
#      innodb.innodb_rename_index*
create table t1 (i int, key k(i)) ENGINE = SMARTENGINE;
insert into t1 values (1);
# Basic rename, inplace algorithm should be chosen
alter table t1 algorithm=inplace, rename key k to kk;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT NULL,
  KEY `kk` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# copy algorithm should work as well.
alter table t1 algorithm=copy, rename key kk to kkk;
affected rows: 1
info: Records: 1  Duplicates: 0  Warnings: 0
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT NULL,
  KEY `kkk` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
drop table t1;
#
# 4) Additional coverage for complex cases in which code
#    in ALTER TABLE comparing old and new table version
#    got confused.
#
# Once InnoDB starts to support in-place index renaming the result
# of below statements should stay the same. Information about
# indexes returned by SHOW CREATE TABLE (from .FRM) and by
# InnoDB (from InnoDB data-dictionary) should be consistent.
#
create table t1 ( a int, b int, c int, d int,
primary key (a), index i1 (b), index i2 (c) ) ENGINE = SMARTENGINE;
alter table t1 add index i1 (d), rename index i1 to x;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int NOT NULL,
  `b` int DEFAULT NULL,
  `c` int DEFAULT NULL,
  `d` int DEFAULT NULL,
  PRIMARY KEY (`a`),
  KEY `x` (`b`),
  KEY `i2` (`c`),
  KEY `i1` (`d`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
drop table t1;
create table t1 (a int, b int, c int, d int,
primary key (a), index i1 (b), index i2 (c)) ENGINE = SMARTENGINE;
alter table t1 add index i1 (d), rename index i1 to i2, drop index i2;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int NOT NULL,
  `b` int DEFAULT NULL,
  `c` int DEFAULT NULL,
  `d` int DEFAULT NULL,
  PRIMARY KEY (`a`),
  KEY `i2` (`b`),
  KEY `i1` (`d`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
drop table t1;
#
# The below ALTER TABLE statement should either drop and recreate key
# under new name, or simply rename it. It should not bring .FRM and
# InnoDB data-dictionary out of sync thus causing asserts.
#
create table t1 (i int, key x(i)) ENGINE = SMARTENGINE;
alter table t1 drop key x, add key X(i), alter column i set default 10;
drop table t1;
#
# BUG 19779365: INDEX COMMENT IN ADD INDEX IS IGNORED.
#
# After the patch, the alter table reflects the new
# index comment or the lack of comment for the indexes.
CREATE TABLE t1(fld1 int, key key1(fld1));
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC			YES	NULL
ALTER TABLE t1 DROP INDEX key1, ADD INDEX key1(fld1) COMMENT 'test';
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		test	YES	NULL
DROP TABLE t1;
CREATE TABLE t1(fld1 int, key key1(fld1) COMMENT 'test');
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		test	YES	NULL
ALTER TABLE t1 DROP INDEX key1, ADD INDEX key1(fld1);
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC			YES	NULL
DROP TABLE t1;
CREATE TABLE t1(fld1 int, key key1(fld1) COMMENT 'test');
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		test	YES	NULL
ALTER TABLE t1 DROP INDEX key1, ADD INDEX key1(fld1) COMMENT 'success';
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		success	YES	NULL
DROP TABLE t1;
CREATE TABLE t1(fld1 int, key key1(fld1) COMMENT 'old comment');
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		old comment	YES	NULL
ALTER TABLE t1 DROP INDEX key1, ADD INDEX key1(fld1) COMMENT 'new comment';
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		new comment	YES	NULL
DROP TABLE t1;
#
# BUG#16886196 - ALTER TABLE FAILS TO CONVERT TO PREFIX INDEX IN
#                ALTER_COLUMN_EQUAL_PACK_LENGTH
SET @orig_sql_mode = @@sql_mode;
SET sql_mode= '';
# Test with '767' as index size limit.
CREATE TABLE t1(fld1 VARCHAR(767), KEY a(fld1)) charset latin1 ENGINE= SMARTENGINE
ROW_FORMAT=COMPACT;
# With patch for Bug#26848813, a warning is reported.
ALTER TABLE t1 CHANGE fld1 fld1 VARCHAR(768), ALGORITHM= COPY;
DROP TABLE t1;
CREATE TABLE t1(fld1 VARCHAR(3072), KEY a(fld1)) charset latin1 ENGINE= SMARTENGINE,
ROW_FORMAT=DYNAMIC;
INSERT INTO t1 VALUES('a');
ALTER TABLE t1 CHANGE fld1 fld1 VARCHAR(3073), ALGORITHM= COPY;
Warnings:
Warning	1071	Specified key was too long; max key length is 3072 bytes
# Without patch, the below statement will assert in a debug build.
SELECT COUNT(*) FROM t1 WHERE fld1= 'a';
COUNT(*)
1
# Cleanup.
DROP TABLE t1;
# Test with prefix indexes up to 3072 bytes.
CREATE TABLE t1(fld1 VARCHAR(3072), KEY a(fld1)) charset latin1 ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES('a');
ALTER TABLE t1 CHANGE fld1 fld1 VARCHAR(3073), ALGORITHM= COPY;
Warnings:
Warning	1071	Specified key was too long; max key length is 3072 bytes
# Without patch, the below statement will assert in a debug build.
SELECT COUNT(*) FROM t1 WHERE fld1= 'a';
COUNT(*)
1
# Cleanup.
DROP TABLE t1;
SET sql_mode= @orig_sql_mode;
#
#BUG#20106553: ALTER TABLE WHICH CHANGES INDEX COMMENT IS NOT
#              LONGER INPLACE/FAST OPERATION.
#Without the patch, the ALTER TABLE to change the index
#comment using INPLACE algorithm reports an error.
CREATE TABLE t1(fld1 int, key key1(fld1)) ENGINE= SMARTENGINE;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC			YES	NULL
ALTER TABLE t1 DROP INDEX key1, ADD INDEX key1(fld1) COMMENT 'test',
ALGORITHM= COPY;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		test	YES	NULL
DROP TABLE t1;
CREATE TABLE t1(fld1 int, key key1(fld1) COMMENT 'test') ENGINE= SMARTENGINE;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		test	YES	NULL
ALTER TABLE t1 DROP INDEX key1, ADD INDEX key1(fld1), ALGORITHM=COPY;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC			YES	NULL
DROP TABLE t1;
CREATE TABLE t1(fld1 int, key key1(fld1) COMMENT 'test') ENGINE= SMARTENGINE;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		test	YES	NULL
ALTER TABLE t1 DROP INDEX key1, ADD INDEX key1(fld1) COMMENT 'success',
ALGORITHM= COPY;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		success	YES	NULL
DROP TABLE t1;
CREATE TABLE t1(fld1 int, key key1(fld1) COMMENT 'old comment') ENGINE=SMARTENGINE;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		old comment	YES	NULL
ALTER TABLE t1 DROP INDEX key1, ADD INDEX key1(fld1) COMMENT 'new comment',
ALGORITHM= COPY;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression
t1	1	key1	1	fld1	A	0	NULL	NULL	YES	SE_SPECIFIC		new comment	YES	NULL
DROP TABLE t1;
#
# Bug#20279241 - ALTER TABLE ... CHARACTER SET UTF8, CONVERT TO
#                CHARACTER SET LATIN1 SHOULD FAIL
#
CREATE TABLE t1 (f1 INT);
# Case 1: Alter table with CHARACTER SET X, CHARACTER SET X
#         ALTER table operation should pass.
ALTER TABLE t1 CHARACTER SET utf8, CHARACTER SET utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
# Case 2: Alter table with CHARACTER SET X, CONVERT TO CHARACTER SET X
#         ALTER table operation should pass.
ALTER TABLE t1 CHARACTER SET utf8, CONVERT TO CHARACTER SET utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
# Case 3: Alter table with CONVERT TO CHARACTER SET X, CHARACTER SET X
#         ALTER table operation should pass.
ALTER TABLE t1 CONVERT TO CHARACTER SET utf8, CHARACTER SET utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
# Case 4: Alter table with CONVERT TO CHARACTER SET X, CONVERT TO CHARACTER SET X
#         ALTER table operation should pass.
ALTER TABLE t1 CONVERT TO CHARACTER SET utf8, CONVERT TO CHARACTER SET utf8;
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
# Case 5: Alter table with CHARACTER SET X, CONVERT TO CHARACTER SET Y
#         Alter table operations should fail with an error "ER_CONFLICTING_DECLARATIONS".
ALTER TABLE t1 CHARACTER SET utf8, CONVERT TO CHARACTER SET latin1;
ERROR HY000: Conflicting declarations: 'CHARACTER SET utf8mb3' and 'CHARACTER SET latin1'
# Case 6: Alter table with CONVERT TO CHARACTER SET X, CHARACTER SET Y
#         Alter table operations should fail with an error "ER_CONFLICTING_DECLARATIONS".
ALTER TABLE t1 CONVERT TO CHARACTER SET utf8, CHARACTER SET latin1;
ERROR HY000: Conflicting declarations: 'CHARACTER SET utf8mb3' and 'CHARACTER SET latin1'
# Case 7: Alter table with CONVERT TO CHARACTER SET X, CONVERT TO CHARACTER SET Y
#         Alter table operations should fail with an error "ER_CONFLICTING_DECLARATIONS".
ALTER TABLE t1 CONVERT TO CHARACTER SET utf8, CONVERT TO CHARACTER SET latin1;
ERROR HY000: Conflicting declarations: 'CHARACTER SET utf8mb3' and 'CHARACTER SET latin1'
# Case 8: Alter table with CHARACTER SET X COLLATE INCORRECT_COLLATION_NAME
#         Alter table operation should fail with an error "ER_COLLATION_CHARSET_MISMATCH"
ALTER TABLE t1 CHARACTER SET utf8 COLLATE latin1_danish_ci;
ERROR 42000: COLLATION 'latin1_danish_ci' is not valid for CHARACTER SET 'utf8mb3'
# Case 9: Alter table with CONVERT TO CHARACTER SET X COLLATE INCORRECT_COLLATION_NAME
#         Alter table operation should fail with an error "ER_COLLATION_CHARSET_MISMATCH"
ALTER TABLE t1 CONVERT TO CHARACTER SET utf8 COLLATE latin1_danish_ci;
ERROR 42000: COLLATION 'latin1_danish_ci' is not valid for CHARACTER SET 'utf8mb3'
# Case 10: Alter table with CHARACTER SET X, CONVERT TO CHARACTER SET Y COLLATE INCORRECT_COLLATION_NAME
#          Alter table operation should fail with an error "ER_COLLATION_CHARSET_MISMATCH"
ALTER TABLE t1 CHARACTER SET latin1, CONVERT TO CHARACTER SET utf8 COLLATE latin1_danish_ci;
ERROR 42000: COLLATION 'latin1_danish_ci' is not valid for CHARACTER SET 'utf8mb3'
DROP TABLE t1;
#
# Bug#22227958: ASSERT IN DD::FILL_DD_TABLE_FROM_CREATE_INFO, DDL
#
# Verify that it is possible to set conflicting values for PACK_KEYS,
# STATS_PERSISTENT CHECKSUM and DELAY_KEY_WRITE
# The last value set should be displayed by SHOW CREATE TABLE.
# Create table with conflicting values
CREATE TABLE t1(i INT) ENGINE=SMARTENGINE PACK_KEYS=0 PACK_KEYS=1
STATS_PERSISTENT=0 STATS_PERSISTENT=1 CHECKSUM=0 CHECKSUM=1
DELAY_KEY_WRITE=0 DELAY_KEY_WRITE=1;
# Should show PACK_KEYS=1 STATS_PERSISTENT=1
# CHECKSUM=1 DELAY_KEY_WRITE=1
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci PACK_KEYS=1 STATS_PERSISTENT=1 CHECKSUM=1 DELAY_KEY_WRITE=1
# Alter table with conflicting values
ALTER TABLE t1 PACK_KEYS=1 PACK_KEYS=0 STATS_PERSISTENT=1 STATS_PERSISTENT=0 CHECKSUM=1 CHECKSUM=0 DELAY_KEY_WRITE=1 DELAY_KEY_WRITE=0;
# Should show PACK_KEYS=0 STATS_PERSISTENT=0 (0 is default for CHECKSUM and DELAY_KEY_WRITE)
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci PACK_KEYS=0 STATS_PERSISTENT=0
DROP TABLE t1;
#
# Bug#22740093: ERROR 1071 (42000): SPECIFIED KEY WAS TOO LONG
#               ERROR WHILE DROPPING INDEX IN 5.7
#
CREATE TABLE t1(id INT PRIMARY KEY,
name TINYTEXT,
KEY nameloc (name(64))
) DEFAULT CHARSET=utf8mb4;
ERROR 42000: Specified key was too long; max key length is 255 bytes
CREATE TABLE t1(id INT PRIMARY KEY,
name TINYTEXT,
KEY nameloc (name(63))
) DEFAULT CHARSET=utf8mb4;
ALTER TABLE t1 FORCE;
ALTER TABLE t1 ADD INDEX idx (name(64), id);
ERROR 42000: Specified key was too long; max key length is 255 bytes
ALTER TABLE t1 ADD INDEX idx (name(63), id);
DROP TABLE t1;
CREATE TABLE t1(id INT PRIMARY KEY,
name TEXT,
KEY nameloc (name(64))
) DEFAULT CHARSET=utf8mb4;
ALTER TABLE t1 MODIFY COLUMN name TINYTEXT;
ERROR 42000: Specified key was too long; max key length is 255 bytes
DROP TABLE t1;
#
# BUG#16888677: OUT OF RANGE VALUE ACCEPTED FOR DATETIME COLUMN IN
#               ALTER TABLE...ADD COLUMN
SET @saved_sql_mode = @@session.sql_mode;
# Test case with no SQL_MODE enabled.
SET SESSION sql_mode= '';
CREATE TABLE t1(fld1 DATE NOT NULL) ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES('2000-01-01');
# No warnings or error is reported
ALTER TABLE t1 ADD COLUMN fld2 DATETIME NOT NULL, ALGORITHM=INPLACE;
ALTER TABLE t1 ADD COLUMN fld3 DATETIME NOT NULL, ALGORITHM=COPY;
ALTER TABLE t1 ADD COLUMN fld4 DATETIME NOT NULL, ALGORITHM=INSTANT;
ERROR 0A000: ALGORITHM=INSTANT is not supported for this operation. Try ALGORITHM=COPY/INPLACE.
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `fld1` date NOT NULL,
  `fld2` datetime NOT NULL,
  `fld3` datetime NOT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
DROP TABLE t1;
# Test case with strict mode enabled.
SET SESSION sql_mode= 'STRICT_ALL_TABLES';
Warnings:
Warning	3135	'NO_ZERO_DATE', 'NO_ZERO_IN_DATE' and 'ERROR_FOR_DIVISION_BY_ZERO' sql modes should be used with strict mode. They will be merged with strict mode in a future release.
CREATE TABLE t1(fld1 DATE NOT NULL) ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES('2000-01-01');
# No warnings or error is reported
ALTER TABLE t1 ADD COLUMN fld2 DATETIME NOT NULL, ALGORITHM=INPLACE;
ALTER TABLE t1 ADD COLUMN fld3 DATETIME NOT NULL, ALGORITHM=COPY;
ALTER TABLE t1 ADD COLUMN fld4 DATETIME NOT NULL, ALGORITHM=INSTANT;
ERROR 0A000: ALGORITHM=INSTANT is not supported for this operation. Try ALGORITHM=COPY/INPLACE.
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `fld1` date NOT NULL,
  `fld2` datetime NOT NULL,
  `fld3` datetime NOT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
DROP TABLE t1;
# Test case with 'NO_ZERO_DATE' enabled.
SET SESSION sql_mode= 'NO_ZERO_DATE';
Warnings:
Warning	3135	'NO_ZERO_DATE', 'NO_ZERO_IN_DATE' and 'ERROR_FOR_DIVISION_BY_ZERO' sql modes should be used with strict mode. They will be merged with strict mode in a future release.
CREATE TABLE t1(fld1 DATE NOT NULL) ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES('2000-01-01');
# Warnings are reported after patch.
ALTER TABLE t1 ADD COLUMN fld2 DATETIME NOT NULL, ALGORITHM=INPLACE;
Warnings:
Warning	1292	Incorrect datetime value: '0000-00-00 00:00:00' for column 'fld2' at row 1
ALTER TABLE t1 ADD COLUMN fld3 DATETIME NOT NULL, ALGORITHM=COPY;
Warnings:
Warning	1264	Out of range value for column 'fld2' at row 1
ALTER TABLE t1 ADD COLUMN fld4 DATETIME NOT NULL, ALGORITHM=INSTANT;
ERROR 0A000: ALGORITHM=INSTANT is not supported for this operation. Try ALGORITHM=COPY/INPLACE.
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `fld1` date NOT NULL,
  `fld2` datetime NOT NULL,
  `fld3` datetime NOT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
DROP TABLE t1;
# Test case with both 'NO_ZERO_DATE and strict mode' enabled.
SET SESSION sql_mode= @saved_sql_mode;
CREATE TABLE t1(fld1 DATE NOT NULL) ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES('2000-01-01');
# Without patch, the following statement succeeds.
ALTER TABLE t1 ADD COLUMN fld2 DATETIME NOT NULL, ALGORITHM=INPLACE;
ERROR 22007: Incorrect datetime value: '0000-00-00 00:00:00' for column 'fld2' at row 1
ALTER TABLE t1 ADD COLUMN fld2 DATETIME NOT NULL, ALGORITHM=COPY;
ERROR 22007: Incorrect datetime value: '0000-00-00 00:00:00' for column 'fld2' at row 1
ALTER TABLE t1 ADD COLUMN fld2 DATETIME NOT NULL, ALGORITHM=INSTANT;
ERROR 0A000: ALGORITHM=INSTANT is not supported for this operation. Try ALGORITHM=COPY/INPLACE.
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `fld1` date NOT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
TRUNCATE TABLE t1;
# Operation below succeeds, since the table has no records.
ALTER TABLE t1 ADD COLUMN fld4 DATETIME NOT NULL default "2019-07-19", ALGORITHM=INSTANT;
DROP TABLE t1;
#
# Additional coverage for WL#7743 "New data dictionary: changes to
# DDL-related parts of SE API". Check that ALTER TABLE INPLACE with
# RENAME TO clause correctly handles FKs and triggers.
#
CREATE TABLE t1 (pk INT PRIMARY KEY) ENGINE=SMARTENGINE;
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=0;
ALTER TABLE t1 ADD COLUMN j INT, RENAME TO t4, ALGORITHM=INSTANT;
SELECT trigger_name, event_object_schema, event_object_table, action_statement
FROM information_schema.triggers WHERE event_object_schema = 'test';
TRIGGER_NAME	EVENT_OBJECT_SCHEMA	EVENT_OBJECT_TABLE	ACTION_STATEMENT
t1_bi	test	t4	SET @a:=0
DROP TABLE t4;

Bug#25779239 ALTER TABLE FAILS WHEN DEFAULT
CHARACTER SET CHANGES TO UTF8MB4

CREATE TABLE t1(
i INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY) charset latin1;
ALTER TABLE t1
DROP i,
ADD i INT UNSIGNED NOT NULL AUTO_INCREMENT,
AUTO_INCREMENT = 1;
DROP TABLE t1;
CREATE TABLE t1(
i INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY) charset utf8mb4;
ALTER TABLE t1
DROP i,
ADD i INT UNSIGNED NOT NULL AUTO_INCREMENT,
AUTO_INCREMENT = 1;
DROP TABLE t1;
#
# BUG#25385334: MYSQL 5.7 ERROR WITH ALTER TABLE MODIFY SYNTAX
#               AND DATETIME TYPE.
SET @saved_sql_mode = @@session.sql_mode;
# Test case with both strict mode and 'NO_ZERO_DATE' enabled.
CREATE TABLE t1 (fld1 INT, fld2 DATETIME NOT NULL) ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES(1, '2000-01-01');
# Without patch, the following statments report error.
ALTER TABLE t1 MODIFY fld2 DATETIME NOT NULL AFTER fld1;
# Without patch, the following statments report error.
ALTER TABLE t1 MODIFY fld2 DATETIME NOT NULL FIRST, ALGORITHM= COPY;
# Tests added for coverage.
ALTER TABLE t1 MODIFY fld2 DATETIME NOT NULL AFTER fld1,
ADD COLUMN fld3 DATETIME NOT NULL;
ERROR 22007: Incorrect datetime value: '0000-00-00 00:00:00' for column 'fld3' at row 1
ALTER TABLE t1 MODIFY fld2 DATETIME NOT NULL AFTER fld1,
ADD COLUMN fld3 DATETIME NOT NULL, ALGORITHM= COPY;
ERROR 22007: Incorrect datetime value: '0000-00-00 00:00:00' for column 'fld3' at row 1
TRUNCATE TABLE t1;
# Without patch, the following statments report error.
ALTER TABLE t1 MODIFY fld2 DATETIME NOT NULL AFTER fld1;
# Without patch, the following statments report error.
ALTER TABLE t1 MODIFY fld2 DATETIME NOT NULL FIRST, ALGORITHM= COPY;
# Tests added for coverage.
ALTER TABLE t1 MODIFY fld2 DATETIME NOT NULL AFTER fld1,
ADD COLUMN fld3 DATETIME NOT NULL;
ALTER TABLE t1 MODIFY fld2 DATETIME NOT NULL AFTER fld1,
ADD COLUMN fld4 DATETIME NOT NULL, ALGORITHM= COPY;
DROP TABLE t1;
# Test case when a non date column is converted to datetime column.
# Test case without any sql mode enabled.
SET SESSION sql_mode= '';
CREATE TABLE t1 (fld1 char(25)) ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES('0000-00-00');
# No error or warning is reported.
ALTER TABLE t1 MODIFY fld1 DATETIME NOT NULL;
DROP TABLE t1;
# Test case with only 'NO_ZERO_DATE' enabled.
SET SESSION sql_mode= 'NO_ZERO_DATE';
Warnings:
Warning	3135	'NO_ZERO_DATE', 'NO_ZERO_IN_DATE' and 'ERROR_FOR_DIVISION_BY_ZERO' sql modes should be used with strict mode. They will be merged with strict mode in a future release.
CREATE TABLE t1 (fld1 char(25)) ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES('0000-00-00');
# Reports only a warning.
ALTER TABLE t1 MODIFY fld1 DATETIME NOT NULL;
Warnings:
Warning	1264	Out of range value for column 'fld1' at row 1
DROP TABLE t1;
SET SESSION sql_mode= 'STRICT_ALL_TABLES';
Warnings:
Warning	3135	'NO_ZERO_DATE', 'NO_ZERO_IN_DATE' and 'ERROR_FOR_DIVISION_BY_ZERO' sql modes should be used with strict mode. They will be merged with strict mode in a future release.
CREATE TABLE t1 (fld1 char(25)) ENGINE= SMARTENGINE;
INSERT INTO t1 VALUES('0000-00-00');
# No error or warning is reported.
ALTER TABLE t1 MODIFY fld1 DATETIME NOT NULL;
DROP TABLE t1;
#
# WL#10761 : ALTER TABLE RENAME COLUMN
#
CREATE TABLE t1(a INT, b VARCHAR(30), c FLOAT);
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL,
  `b` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `c` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
INSERT INTO t1 VALUES(1,'abcd',1.234);
CREATE TABLE t2(a INT, b VARCHAR(30), c FLOAT) ENGINE=SMARTENGINE;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `a` int DEFAULT NULL,
  `b` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `c` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
INSERT INTO t2 VALUES(1,'abcd',1.234);
ALTER TABLE t1 RENAME COLUMN a TO a;
ALTER TABLE t1 RENAME COLUMN a TO m;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `m` int DEFAULT NULL,
  `b` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `c` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
SELECT * FROM t1;
m	b	c
1	abcd	1.234
ALTER TABLE t1 RENAME COLUMN m TO x,
RENAME COLUMN b TO y,
RENAME COLUMN c TO z;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `x` int DEFAULT NULL,
  `y` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `z` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
SELECT * FROM t1;
x	y	z
1	abcd	1.234
ALTER TABLE t2 RENAME COLUMN a TO d, RENAME COLUMN b TO e, RENAME COLUMN c to f;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `d` int DEFAULT NULL,
  `e` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `f` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
SELECT * FROM t2;
d	e	f
1	abcd	1.234
ALTER TABLE t1 CHANGE COLUMN x a INT, RENAME COLUMN y TO b;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL,
  `b` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `z` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 CHANGE COLUMN z c DOUBLE, RENAME COLUMN b to b;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL,
  `b` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `c` double DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 CHANGE COLUMN a b int, RENAME COLUMN b TO c, CHANGE COLUMN c d FLOAT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `b` int DEFAULT NULL,
  `c` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `d` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ADD COLUMN zz INT, RENAME COLUMN d TO f;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `b` int DEFAULT NULL,
  `c` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `f` float DEFAULT NULL,
  `zz` int DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 DROP COLUMN zz, RENAME COLUMN c TO zz;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `b` int DEFAULT NULL,
  `zz` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `f` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME COLUMN zz to c, DROP COLUMN f;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `b` int DEFAULT NULL,
  `c` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ADD COLUMN d INT DEFAULT 5, RENAME COLUMN c TO b, DROP COLUMN b;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `b` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `d` int DEFAULT '5'
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME COLUMN b TO d, RENAME COLUMN d TO b;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `d` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `b` int DEFAULT '5'
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ADD KEY(b);
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `d` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `b` int DEFAULT '5',
  KEY `b` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME COLUMN b TO bb;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `d` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `bb` int DEFAULT '5',
  KEY `b` (`bb`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
SELECT * FROM t1;
d	bb
abcd	5
CREATE TABLE t3(a int, b int, KEY(b)) ENGINE=SMARTENGINE;
SHOW CREATE TABLE t3;
Table	Create Table
t3	CREATE TABLE `t3` (
  `a` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  KEY `b` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME COLUMN bb TO b;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `d` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `b` int DEFAULT '5',
  KEY `b` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t3 RENAME COLUMN b TO c;
SHOW CREATE TABLE t3;
Table	Create Table
t3	CREATE TABLE `t3` (
  `a` int DEFAULT NULL,
  `c` int DEFAULT NULL,
  KEY `b` (`c`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
CREATE TABLE t4(a int);
ALTER TABLE t4 RENAME COLUMN a TO aa, ALGORITHM = COPY;
SHOW CREATE TABLE t4;
Table	Create Table
t4	CREATE TABLE `t4` (
  `aa` int DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t4 RENAME COLUMN aa TO a, ALGORITHM = COPY;
SHOW CREATE TABLE t4;
Table	Create Table
t4	CREATE TABLE `t4` (
  `a` int DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
DROP TABLE t4;
CREATE VIEW v1 AS SELECT d,e,f FROM t2;
CREATE TRIGGER trg1 BEFORE UPDATE on t2 FOR EACH ROW SET NEW.d=OLD.d + 10;
CREATE PROCEDURE sp1() INSERT INTO t2(d) VALUES(10);
ALTER TABLE t2 RENAME COLUMN d TO g;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `g` int DEFAULT NULL,
  `e` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `f` float DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
SHOW CREATE VIEW v1;
View	Create View	character_set_client	collation_connection
v1	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v1` AS select `t2`.`d` AS `d`,`t2`.`e` AS `e`,`t2`.`f` AS `f` from `t2`	utf8mb4	utf8mb4_0900_ai_ci
Warnings:
Warning	1356	View 'test.v1' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them
SELECT * FROM v1;
ERROR HY000: View 'test.v1' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them
UPDATE t2 SET f = f + 10;
ERROR 42S22: Unknown column 'd' in 'OLD'
CALL sp1();
ERROR 42S22: Unknown column 'd' in 'field list'
DROP TRIGGER trg1;
DROP PROCEDURE sp1;
CREATE TABLE foo (col1 INT);
INSERT INTO foo VALUES (1), (2);
ANALYZE TABLE foo UPDATE HISTOGRAM ON col1 WITH 10 BUCKETS;
Table	Op	Msg_type	Msg_text
test.foo	histogram	status	Histogram statistics created for column 'col1'.
SELECT schema_name, table_name, column_name,
JSON_REMOVE(histogram, '$."last-updated"')
FROM information_schema.COLUMN_STATISTICS;
SCHEMA_NAME	TABLE_NAME	COLUMN_NAME	JSON_REMOVE(histogram, '$."last-updated"')
test	foo	col1	{"buckets": [[1, 0.5], [2, 1.0]], "data-type": "int", "null-values": 0.0, "collation-id": 8, "sampling-rate": 1.0, "histogram-type": "singleton", "number-of-buckets-specified": 10}
ALTER TABLE foo RENAME COLUMN col1 TO col2;
SELECT schema_name, table_name, column_name,
JSON_REMOVE(histogram, '$."last-updated"')
FROM information_schema.COLUMN_STATISTICS;
SCHEMA_NAME	TABLE_NAME	COLUMN_NAME	JSON_REMOVE(histogram, '$."last-updated"')
DROP TABLE foo;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `d` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `b` int DEFAULT '5',
  KEY `b` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME COLUMN b z;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'z' at line 1
ALTER TABLE t1 RENAME COLUMN FROM b TO z;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM b TO z' at line 1
ALTER TABLE t1 RENAME COLUMN b TO 1;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1' at line 1
ALTER TABLE t1 RENAME COLUMN b TO e, RENAME COLUMN c TO e;
ERROR 42S22: Unknown column 'c' in 't1'
ALTER TABLE t1 ADD COLUMN z INT, RENAME COLUMN b TO z;
ERROR 42S21: Duplicate column name 'z'
ALTER TABLE t1 DROP COLUMN b, RENAME COLUMN b TO z;
ERROR 42S22: Unknown column 'b' in 't1'
ALTER TABLE t1 RENAME COLUMN b TO b, RENAME COLUMN b TO b;
ERROR 42S22: Unknown column 'b' in 't1'
ALTER TABLE t1 RENAME COLUMN b TO c3, DROP COLUMN c3;
ERROR 42000: Can't DROP 'c3'; check that column/key exists
ALTER TABLE t1 ADD COLUMN z INT, CHANGE COLUMN z y INT, DROP COLUMN y;
ERROR 42S22: Unknown column 'z' in 't1'
ALTER TABLE t1 ADD COLUMN z INT, RENAME COLUMN z TO y, DROP COLUMN y;
ERROR 42S22: Unknown column 'z' in 't1'
ALTER TABLE t1 RENAME COLUMN b TO `nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn`;
ERROR 42000: Incorrect column name 'nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn'
ALTER TABLE t1 CHANGE b `nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn` int;
ERROR 42000: Identifier name 'nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn' is too long
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `d` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `b` int DEFAULT '5',
  KEY `b` (`b`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
SELECT * FROM t1;
d	b
abcd	5
DROP VIEW v1;
DROP TABLE t3,t1,t2;
SET SESSION information_schema_stats_expiry=default;
#
# Basic test coverage for ALGORITHM=INSTANT support on SQL-layer.
#
#
# 1) Syntax.
#
CREATE TABLE t1 (i INT) ENGINE=SMARTENGINE;
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 10, ALGORITHM=INSTANT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT '10'
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
# ALGORITHM=INSTANT doesn't make sense with LOCK clause.
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 11, ALGORITHM=INSTANT, LOCK=NONE;
ERROR HY000: Incorrect usage of ALGORITHM=INSTANT and LOCK=NONE/SHARED/EXCLUSIVE
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 12, ALGORITHM=INSTANT, LOCK=SHARED;
ERROR HY000: Incorrect usage of ALGORITHM=INSTANT and LOCK=NONE/SHARED/EXCLUSIVE
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 13, ALGORITHM=INSTANT, LOCK=EXCLUSIVE;
ERROR HY000: Incorrect usage of ALGORITHM=INSTANT and LOCK=NONE/SHARED/EXCLUSIVE
# ALGORITHM=INSTANT and LOCK=DEFAULT are OK though.
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 13, ALGORITHM=INSTANT, LOCK=DEFAULT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT '13'
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
#
# 2) We support INSTANT algorithm for a few trivial metadata-only
#
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 14, ALGORITHM=INSTANT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT '14'
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ALTER COLUMN i DROP DEFAULT, ALGORITHM=INSTANT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ADD COLUMN j ENUM('a', 'b', 'c');
ALTER TABLE t1 MODIFY COLUMN j ENUM('a', 'b', 'c', 'd', 'e'), ALGORITHM=INSTANT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME TO t2, ALGORITHM=INSTANT;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `i` int,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
#
# 3) You can still use ALGORITHM=INPLACE for these operations
#    (even though INSTANT algorithm will be used internally).
#
ALTER TABLE t2 RENAME TO t1, ALGORITHM=INPLACE;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 15, ALGORITHM=INPLACE;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT '15',
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ALTER COLUMN i DROP DEFAULT, ALGORITHM=INPLACE;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 MODIFY COLUMN j ENUM('a', 'b', 'c', 'd', 'e', 'f', 'g'), ALGORITHM=INPLACE;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int,
  `j` enum('a','b','c','d','e','f','g') COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
#
# 4) However, some operations are not supported as INSTANT.
#
ALTER TABLE t1 ADD KEY(j), ALGORITHM=INSTANT;
ERROR 0A000: ALGORITHM=INSTANT is not supported for this operation. Try ALGORITHM=COPY/INPLACE.
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 15, DROP COLUMN j, ALGORITHM=INSTANT;
ERROR 0A000: ALGORITHM=INSTANT is not supported for this operation. Try ALGORITHM=COPY/INPLACE.
#
# 5) For MyISAM tables we support INSTANT algorithm for metadata-only
#    changes as well.
#
DROP TABLE t1;
CREATE TABLE t1 (i INT, j ENUM('a', 'b'), KEY(i)) ENGINE=SMARTENGINE;
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 10, ALGORITHM=INSTANT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT '10',
  `j` enum('a','b') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `i` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ALTER COLUMN i DROP DEFAULT, ALGORITHM=INSTANT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int,
  `j` enum('a','b') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `i` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 MODIFY COLUMN j ENUM('a', 'b', 'c', 'd', 'e'), ALGORITHM=INSTANT;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `i` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 CHANGE COLUMN i k INT, ALGORITHM=COPY;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `k` int DEFAULT NULL,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `i` (`k`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME INDEX i TO k, ALGORITHM=COPY;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `k` int DEFAULT NULL,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `k` (`k`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME TO t2, ALGORITHM=INSTANT;
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `k` int DEFAULT NULL,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `k` (`k`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
#
# 6) And you can still use ALGORITHM=INPLACE for the same operations
#    for MyISAM tables too.
#
ALTER TABLE t2 RENAME TO t1, ALGORITHM=INPLACE;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `k` int DEFAULT NULL,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `k` (`k`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ALTER COLUMN k SET DEFAULT 11, ALGORITHM=INPLACE;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `k` int DEFAULT '11',
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `k` (`k`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 ALTER COLUMN k DROP DEFAULT, ALGORITHM=INPLACE;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `k` int,
  `j` enum('a','b','c','d','e') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `k` (`k`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 MODIFY COLUMN j ENUM('a', 'b', 'c', 'd', 'e', 'f', 'g'), ALGORITHM=INPLACE;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `k` int,
  `j` enum('a','b','c','d','e','f','g') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `k` (`k`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 CHANGE COLUMN k i INT, ALGORITHM=COPY;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT NULL,
  `j` enum('a','b','c','d','e','f','g') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `k` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
ALTER TABLE t1 RENAME INDEX k TO i, ALGORITHM=COPY;
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i` int DEFAULT NULL,
  `j` enum('a','b','c','d','e','f','g') COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `i` (`i`)
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
#
# 7) Indeed, some options are not supported as INSTANT
#
ALTER TABLE t1 ADD COLUMN l INT, ALGORITHM=INSTANT;
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT 12, DROP COLUMN j, ALGORITHM=INSTANT;
ERROR 0A000: ALGORITHM=INSTANT is not supported for this operation. Try ALGORITHM=COPY/INPLACE.
DROP TABLE t1;
#
# Bug#27864226: ASSERTION `(CREATE_INFO->USED_FIELDS & (1L << 8)) == 0 ||
#
CREATE TABLE t1 (a INT) ENGINE=SMARTENGINE;
# Verify that ALTER can have both a CONVERT clause and a
# DEFAULT CHARACTER SET clause with different charsets
ALTER TABLE t1 CONVERT TO CHARACTER SET utf16 COLLATE utf16_turkish_ci,
DEFAULT CHARACTER SET utf16 COLLATE utf16_slovak_ci;
# Verify that last default (utf16) overrides
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf16 COLLATE=utf16_slovak_ci
DROP TABLE t1;
#  BUG#27909771 - [MYSQL 8.0 GA DEBUG BUILD] ASSERTION `(*IDX_EL_IT)->IS_PREFIX() == STATIC_CAST<B
#
SET SQL_MODE='';
CREATE TABLE t1 SELECT 100000000000000000000000000000000000000000000000000000000000000001 AS c1;
Warnings:
Warning	1264	Out of range value for column 'c1' at row 1
ALTER TABLE t1 ADD INDEX (c1);
DROP TABLE t1;
SET SQL_MODE=default;
#
# BUG#26848813: INDEXED COLUMN CAN'T BE CHANGED FROM VARCHAR(15)
#               TO VARCHAR(40) INSTANTANEOUSLY
SET @orig_sql_mode = @@sql_mode;
# Tests where an error is reported under strict mode when the index
# limit exceeds the maximum supported length by SE.
# Test with prefix indexes where the index limit is 767 bytes
CREATE TABLE t1 (fld1 VARCHAR(767), KEY(fld1)) CHARSET latin1 ENGINE=SMARTENGINE;
ALTER TABLE t1 MODIFY fld1 VARCHAR(768), ALGORITHM= COPY;
# Test with prefix indexes where the index limit is 3072 bytes
CREATE TABLE t2 (fld1 VARCHAR(3072), KEY(fld1)) CHARSET latin1 ENGINE=SMARTENGINE
ROW_FORMAT=DYNAMIC;
ALTER TABLE t2 MODIFY fld1 VARCHAR(3073), ALGORITHM= COPY;
Warnings:
Warning	1071	Specified key was too long; max key length is 3072 bytes
DROP TABLE t1, t2;
SET sql_mode= '';
# Test where the indexes are truncated to fit the index limit and
# a warning is reported under non-strict mode when the index exceeds
# the SE limit.
CREATE TABLE t1 (fld1 VARCHAR(768), KEY(fld1)) ENGINE= SMARTENGINE
ROW_FORMAT=COMPACT;
CREATE TABLE t2 (fld1 VARCHAR(3073), KEY(fld1)) ENGINE= SMARTENGINE;
Warnings:
Warning	1071	Specified key was too long; max key length is 3072 bytes
# Test with prefix indexes where the index limit is 767 bytes.
CREATE TABLE t3 (fld1 VARCHAR(767), KEY(fld1))ENGINE=SMARTENGINE ROW_FORMAT=COMPACT;
ALTER TABLE t3 MODIFY fld1 VARCHAR(768), ALGORITHM= COPY;
ALTER TABLE t3 MODIFY fld1 VARCHAR(800), ALGORITHM= COPY;
Warnings:
Warning	1071	Specified key was too long; max key length is 3072 bytes
# Test with prefix indexes where the index limit is 3072 bytes.
CREATE TABLE t4 (fld1 VARCHAR(3072), KEY(fld1))ENGINE=SMARTENGINE
ROW_FORMAT=DYNAMIC;
Warnings:
Warning	1071	Specified key was too long; max key length is 3072 bytes
ALTER TABLE t4 MODIFY fld1 VARCHAR(3073), ALGORITHM= COPY;
ALTER TABLE t4 MODIFY fld1 VARCHAR(3074), ALGORITHM= COPY;
# For unique and primary keys, an error is reported even in non-strict
# mode.
CREATE TABLE t5(fld1 VARCHAR(769) PRIMARY KEY) ENGINE= SMARTENGINE CHARSET=utf8mb4
ROW_FORMAT=COMPACT;
ERROR 42000: Specified key was too long; max key length is 3072 bytes
CREATE TABLE t5(fld1 VARCHAR(3073), UNIQUE KEY(fld1)) ENGINE= SMARTENGINE;
ERROR 42000: Specified key was too long; max key length is 3072 bytes
DROP TABLE t1, t2, t3, t4;
SET sql_mode= @orig_sql_mode;
# Tests added for coverage.
CREATE TABLE t1(fld1 VARCHAR(3), KEY(fld1)) ENGINE=SMARTENGINE;
# Conversion of unpacked keys to packed keys reports
# error for INPLACE Alter.
ALTER TABLE t1 MODIFY fld1 VARCHAR(10), ALGORITHM=INPLACE;
# Succeeds with index rebuild.
ALTER TABLE t1 MODIFY fld1 VARCHAR(10), ALGORITHM=COPY;
# Succeeds since the row format is dynamic.
CREATE TABLE t2(fld1 VARCHAR(768), KEY(fld1)) ENGINE= SMARTENGINE ROW_FORMAT= DYNAMIC;
# An error is reported when the index exceeds the column size
# in both strict and non-strict mode.
ALTER TABLE t2 ADD INDEX idx1(fld1(769));
ERROR HY000: Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
SET sql_mode= '';
ALTER TABLE t2 ADD INDEX idx1(fld1(769));
ERROR HY000: Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
# Cleanup.
DROP TABLE t1, t2;
SET sql_mode= @orig_sql_mode;
#
# Testing wl#11605: Alter table with character set conversion as
# inplace operation, Step 1, NO INDEX
#
SET NAMES UTF8MB4;
# VARCHAR(512): SWE7 -> BINARY
CREATE TABLE t1(c1 VARCHAR(512) CHARSET SWE7);
ALTER TABLE t1 MODIFY COLUMN c1 VARCHAR(512) CHARSET BINARY,
ALGORITHM = COPY;
DROP TABLE t1;
# VARCHAR(512): ASCII -> BINARY
CREATE TABLE t1(c1 VARCHAR(512) CHARSET ASCII);
ALTER TABLE t1 MODIFY COLUMN c1 VARCHAR(512) CHARSET BINARY,
ALGORITHM = COPY;
DROP TABLE t1;
# VARCHAR(512): UTF8MB4 -> BINARY
# Not allowed because 512 binary chars cannot hold all 512 char
# utf8mb4 strings
CREATE TABLE t1(c1 VARCHAR(512) CHARSET UTF8MB4);
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5));
# VARCHAR(512) CHARSET UTF8MB4 -> VARCHAR(2048) CHARSET BINARY:
# Converting to BINARY and increasing the VARCHAR size accordingly is ok
ALTER TABLE t1 MODIFY COLUMN c1 VARCHAR(2048) CHARSET BINARY,
ALGORITHM = COPY;
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æøå
𐐀
DROP TABLE t1;
# Conversions requiring COPY algorithm
CREATE TABLE t1(c1 VARCHAR(512) CHARSET ASCII);
INSERT INTO t1 VALUES ('a string');
# VARCHAR(512): ASCII -> SWE7
ALTER TABLE t1 MODIFY COLUMN c1 VARCHAR(512) CHARSET SWE7, ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
# VARCHAR(512): ASCII -> UCS2
ALTER TABLE t1 MODIFY COLUMN c1 VARCHAR(512) CHARSET UCS2, ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
# VARCHAR(512): ASCII -> UTF8MB4
ALTER TABLE t1 MODIFY COLUMN c1 VARCHAR(512) CHARSET UTF8MB4,
ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
DROP TABLE t1;
# VARCHAR(512): UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 VARCHAR(512) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 VARCHAR(512) CHARSET UTF8MB4,
ALGORITHM = COPY;
# Insert chars that only can be represented in utf8mb4
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æøåtext
𐐀
DROP TABLE t1;
# CHAR(1): UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 CHAR(1) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (0xc3a6), (0xc3b8);
ALTER TABLE t1 MODIFY COLUMN c1 CHAR(1) CHARSET UTF8MB4, ALGORITHM = COPY;
SELECT * FROM t1;
c1
æ
ø
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æ
ø
𐐀
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
DROP TABLE t1;
# CHAR(31): UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 CHAR(31) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 CHAR(31) CHARSET UTF8MB4, ALGORITHM = COPY;
# Insert chars that only can be represented in utf8mb4
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æøåtext
𐐀
DROP TABLE t1;
# Crossing the boundary of 256 bytes usage, cannot be INPLACE.
# 85*3 -> 85*4 and 64*3 -> 64*4
CREATE TABLE t1(c1 CHAR(85) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 CHAR(85) CHARSET UTF8MB4, ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
DROP TABLE t1;
# Increase in column size above 256 bytes should be inplace.
# 86*3 -> 86*4
CREATE TABLE t1(c1 CHAR(86) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 CHAR(86) CHARSET UTF8MB4, ALGORITHM = COPY;
DROP TABLE t1;
# Increase in column size within 256 bytes should be inplace.
# 63*3 -> 63*4
CREATE TABLE t1(c1 CHAR(63) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 CHAR(63) CHARSET UTF8MB4, ALGORITHM = COPY;
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æøåtext
𐐀
DROP TABLE t1;
# TINYTEXT: UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 TINYTEXT CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 TINYTEXT CHARSET UTF8MB4, ALGORITHM = COPY;
# Insert chars that only can be represented in utf8mb4
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æøåtext
𐐀
DROP TABLE t1;
# TEXT: UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 TEXT CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 TEXT CHARSET UTF8MB4, ALGORITHM = COPY;
# Insert chars that only can be represented in utf8mb4
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æøåtext
𐐀
DROP TABLE t1;
# MEDIUMTEXT: UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 MEDIUMTEXT CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 MEDIUMTEXT CHARSET UTF8MB4, ALGORITHM = COPY;
# Insert chars that only can be represented in utf8mb4
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æøåtext
𐐀
DROP TABLE t1;
# LONGTEXT: UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 LONGTEXT CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT(0xc3a6, 0xc3b8, 0xc3a5, "text"));
ALTER TABLE t1 MODIFY COLUMN c1 LONGTEXT CHARSET UTF8MB4, ALGORITHM = COPY;
# Insert chars that only can be represented in utf8mb4
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
æøåtext
𐐀
DROP TABLE t1;
# ENUM: UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 ENUM('a','b','c') CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES ('a');
ALTER TABLE t1 MODIFY COLUMN c1 ENUM('a','b','c', 0xf0909080) CHARSET UTF8MB4,
ALGORITHM = INPLACE;
# Insert chars that only can be represented in utf8mb4
INSERT INTO t1 VALUES (0xf0909080);
SELECT * FROM t1;
c1
a
𐐀
DROP TABLE t1;
# ENUM: UTF8MB3 -> UTF8MB4: Inplace rejected, new value not at the end
CREATE TABLE t1(c1 ENUM(0xc3a6,0xc3b8,0xc3a5) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
ALTER TABLE t1 MODIFY COLUMN c1 ENUM(0xc3a6,0xf0909080,0xc3b8,0xc3a5)
CHARSET UTF8MB4, ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
DROP TABLE t1;
# ENUM: ASCII -> BINARY
CREATE TABLE t1(c1 ENUM('a', 'b','c') CHARSET ASCII);
ALTER TABLE t1 MODIFY COLUMN c1 ENUM('a','b','c') CHARSET BINARY,
ALGORITHM = INPLACE;
DROP TABLE t1;
# ENUM: SWE7 -> BINARY
CREATE TABLE t1(c1 ENUM('a','b','c') CHARSET SWE7);
ALTER TABLE t1 MODIFY COLUMN c1 ENUM('a','b','c') CHARSET BINARY,
ALGORITHM = INPLACE;
DROP TABLE t1;
# ENUM: UTF8MB3 -> BINARY
CREATE TABLE t1(c1 ENUM('a','b','c') CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
ALTER TABLE t1 MODIFY COLUMN c1 ENUM('a','b','c') CHARSET BINARY,
ALGORITHM = INPLACE;
DROP TABLE t1;
# ENUM: UTF8MB4 -> BINARY
CREATE TABLE t1(c1 ENUM('a','b','c') CHARSET UTF8MB4);
ALTER TABLE t1 MODIFY COLUMN c1 ENUM('a','b','c') CHARSET BINARY,
ALGORITHM = INPLACE;
DROP TABLE t1;
# SET: UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 SET('b',0xc3a6,0xc3b8,0xc3a5) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
INSERT INTO t1 VALUES (CONCAT('b,', 0xc3a6));
ALTER TABLE t1 MODIFY COLUMN c1 SET('b',0xc3a6,0xc3b8,0xc3a5,0xf0909080)
CHARSET UTF8MB4, ALGORITHM = INPLACE;
# Insert set value which can only be represented in utf8mb4
INSERT INTO t1 VALUES (CONCAT('b,', 0xf0909080, ',', 0xc3b8));
SELECT * FROM t1;
c1
b,æ
b,ø,𐐀
DROP TABLE t1;
# SET: UTF8MB3 -> UTF8MB4: Inplace rejected, new value not at the end
CREATE TABLE t1(c1 SET(0xc3a6,0xc3b8,0xc3a5) CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
ALTER TABLE t1 MODIFY COLUMN c1 SET(0xc3a6,0xf0909080,0xc3b8,0xc3a5)
CHARSET UTF8MB4, ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
DROP TABLE t1;
# SET: ASCII -> BINARY
CREATE TABLE t1(c1 SET('a','b','c') CHARSET ASCII);
ALTER TABLE t1 MODIFY COLUMN c1 SET('a','b','c') CHARSET BINARY,
ALGORITHM = INPLACE;
DROP TABLE t1;
# SET: SWE7 -> BINARY
CREATE TABLE t1(c1 SET('a','b','c') CHARSET SWE7);
ALTER TABLE t1 MODIFY COLUMN c1 SET('a','b','c') CHARSET BINARY,
ALGORITHM = INPLACE;
DROP TABLE t1;
# SET: UTF8MB3 -> BINARY
CREATE TABLE t1(c1 SET('a','b','c') CHARSET UTF8MB3);
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
ALTER TABLE t1 MODIFY COLUMN c1 SET('a','b','c') CHARSET BINARY,
ALGORITHM = INPLACE;
DROP TABLE t1;
# SET: UTF8MB4 -> BINARY
CREATE TABLE t1(c1 SET('a','b','c') CHARSET UTF8MB4);
ALTER TABLE t1 MODIFY COLUMN c1 SET('a','b','c') CHARSET BINARY,
ALGORITHM = INPLACE;
DROP TABLE t1;
# SET operations
CREATE TABLE t1 (a SET('a1','a2'));
INSERT INTO t1 VALUES ('a1'),('a2');
# No copy: Add new to the end
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','a3'), ALGORITHM = INPLACE;
INSERT INTO t1 VALUES ('a2,a3');
SELECT a FROM t1;
a
a1
a2
a2,a3
# Copy: Modify and add new to the end
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','xx','a5'), ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
# Copy: Remove from the end
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2'), ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
# Copy: Add new member in the middle
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','a0','a3'), ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
# No copy: Add new to the end
ALTER TABLE t1 MODIFY COLUMN a SET('a1','a2','a3','a4'), ALGORITHM = INPLACE;
INSERT INTO t1 VALUES ('a3,a4');
SELECT a FROM t1;
a
a1
a2
a2,a3
a3,a4
# Numerical increase (pack length), but adding to the end
# It should be possible to do this inplace, but leads to crash in
# DML on altered table.
ALTER TABLE t1 MODIFY COLUMN a
SET('a1','a2','a3','a4','a5','a6','a7','a8','a9','a10'), ALGORITHM = INPLACE;
ERROR 0A000: ALGORITHM=INPLACE is not supported. Reason: Cannot change column type INPLACE. Try ALGORITHM=COPY.
DROP TABLE t1;
# Change charset for Instantly added column
# UTF8MB3 -> UTF8MB4
CREATE TABLE t1(c1 int, c2 CHAR(1) CHARSET ASCII);
INSERT INTO t1 VALUES(1,'a');
ALTER TABLE t1 ADD COLUMN c3 VARCHAR(1) CHARSET UTF8MB3 DEFAULT 'b', ALGORITHM = INSTANT;
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
SELECT * FROM t1;
c1	c2	c3
1	a	b
ALTER TABLE t1 MODIFY COLUMN c3 VARCHAR(1) CHARSET UTF8MB4, ALGORITHM = COPY;
SELECT * FROM t1;
c1	c2	c3
1	a	b
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `c1` int DEFAULT NULL,
  `c2` char(1) CHARACTER SET ascii COLLATE ascii_general_ci DEFAULT NULL,
  `c3` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL
) ENGINE=SMARTENGINE DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
DROP TABLE t1;
# table level charset change
CREATE TABLE t1(c VARCHAR(1)) CHARSET ASCII;
INSERT INTO t1 VALUES('a');
SELECT * FROM t1;
c
a
ALTER TABLE t1 CONVERT TO CHARSET BINARY, ALGORITHM = COPY;
SELECT * FROM t1;
c
a
DROP TABLE t1;
SET NAMES default;
#
# BUG#27788685: NO WARNING WHEN TRUNCATING A STRING WITH DATA LOSS
#
SET GLOBAL max_allowed_packet=17825792;
CREATE TABLE t1 (t1_fld1 TEXT) ENGINE=SMARTENGINE;
CREATE TABLE t2 (t2_fld1 MEDIUMTEXT) ENGINE=SMARTENGINE;
CREATE TABLE t3 (t3_fld1 LONGTEXT) ENGINE=SMARTENGINE;
INSERT INTO t1 VALUES (REPEAT('a',300));
INSERT INTO t2 VALUES (REPEAT('b',65680));
INSERT INTO t3 VALUES (REPEAT('c',16777300));
SELECT LENGTH(t1_fld1) FROM t1;
LENGTH(t1_fld1)
300
SELECT LENGTH(t2_fld1) FROM t2;
LENGTH(t2_fld1)
65680
SELECT LENGTH(t3_fld1) FROM t3;
LENGTH(t3_fld1)
16777300
# With strict mode
SET SQL_MODE='STRICT_ALL_TABLES';
Warnings:
Warning	3135	'NO_ZERO_DATE', 'NO_ZERO_IN_DATE' and 'ERROR_FOR_DIVISION_BY_ZERO' sql modes should be used with strict mode. They will be merged with strict mode in a future release.
ALTER TABLE t1 CHANGE `t1_fld1` `my_t1_fld1` TINYTEXT;
ERROR 22001: Data too long for column 'my_t1_fld1' at row 1
ALTER TABLE t2 CHANGE `t2_fld1` `my_t2_fld1` TEXT;
ERROR 22001: Data too long for column 'my_t2_fld1' at row 1
ALTER TABLE t3 CHANGE `t3_fld1` `my_t3_fld1` MEDIUMTEXT;
ERROR 22001: Data too long for column 'my_t3_fld1' at row 1
# With non-strict mode
SET SQL_MODE='';
ALTER TABLE t1 CHANGE `t1_fld1` `my_t1_fld1` TINYTEXT;
Warnings:
Warning	1265	Data truncated for column 'my_t1_fld1' at row 1
ALTER TABLE t2 CHANGE `t2_fld1` `my_t2_fld1` TEXT;
Warnings:
Warning	1265	Data truncated for column 'my_t2_fld1' at row 1
ALTER TABLE t3 CHANGE `t3_fld1` `my_t3_fld1` MEDIUMTEXT;
Warnings:
Warning	1265	Data truncated for column 'my_t3_fld1' at row 1
SELECT LENGTH(my_t1_fld1) FROM t1;
LENGTH(my_t1_fld1)
255
SELECT LENGTH(my_t2_fld1) FROM t2;
LENGTH(my_t2_fld1)
65535
SELECT LENGTH(my_t3_fld1) FROM t3;
LENGTH(my_t3_fld1)
16777215
DROP TABLE t1, t2, t3;
SET SQL_MODE=default;
SET GLOBAL max_allowed_packet=default;
