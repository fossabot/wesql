#
# Test for consistent snapshot recovery from object store
#

# 1. install mysql_clone plugin
--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

# 2. create run directory
--echo # Create binlog archive path
--let $archive_dir=$MYSQL_TMP_DIR/mysql_archive
--mkdir $archive_dir

--echo # Create local object store
--let $objstore_dir=$MYSQL_TMP_DIR/objstore
--mkdir $objstore_dir
--echo # Create local object store bucket
--let $bucket=bucket1
--let $objstore_bucket=$objstore_dir/$bucket
--mkdir $objstore_bucket

--let $MYSQLD_DATADIR=`select @@datadir`

# 3. start with consistent-snapshot-archive
--echo # Server restart with --consistent-snapshot-archive=true
--replace_result $archive_dir archive_dir $objstore_dir objstore_dir
--let $restart_parameters=restart: --smartengine=1 --default-storage-engine=smartengine --default-tmp-storage_engine=innodb --serverless=true --consistent_snapshot_archive_period=1 --consistent_snapshot_archive_dir=$archive_dir --objstore_provider=local --objstore_region=$objstore_dir --objstore_bucket=$bucket
--source include/restart_mysqld.inc

CREATE DATABASE db1;
CREATE TABLE t1(c1 int) ENGINE=SMARTENGINE ;
INSERT INTO t1 values(1);
INSERT INTO t1 values(2);
INSERT INTO t1 values(3);
INSERT INTO t1 values(4);
SELECT * FROM t1;
SHOW CREATE TABLE t1;
--sleep 10
--echo #
--echo # Check for contain innodb_archive consistent_snapshot.index
--let $grep_file=$MYSQL_TMP_DIR/objstore/$bucket/consistent_snapshot.index
--let $grep_pattern=innodb_archive.*
--let $grep_output= boolean
--source include/grep_pattern.inc

--echo # Check for contain se_archive consistent_snapshot.index
--let $grep_pattern=se_archive.*
--let $grep_output= boolean
--source include/grep_pattern.inc

--echo # Select mysql innodb persistent views
--let $assert_text= 1st mysql innodb archive file should be innodb_archive_000001.
--let $assert_cond= "[SELECT * FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_INNODB_SNAPSHOT_INDEX, archive_name, 1]" = "innodb_archive_000001"
--source include/assert.inc
--disable_warnings
--let $assert_text= mysql pesistent innodb archive file exist.
--let $assert_cond= COUNT(archive_name) > 0 from INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_INNODB_SNAPSHOT
--source include/assert.inc
--enable_warnings

--echo # Select smartengine persistent views
--let $assert_text= 1st smartengine archive file should be se_archive_000001.
--let $assert_cond= "[SELECT * FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SMARTENGINE_SNAPSHOT_INDEX, archive_name, 1]" = "se_archive_000001"
--source include/assert.inc
--disable_warnings
--let $assert_text= smartengine pesistent archive file exist.
--let $assert_cond= COUNT(archive_name) > 0 from INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SMARTENGINE_SNAPSHOT
--source include/assert.inc
--enable_warnings

--echo # Select binlog persistent views
--let $assert_text= 1st binlog archive file should be binlog.000001.
--let $assert_cond= "[SELECT * FROM INFORMATION_SCHEMA.BINLOG_PERSISTENT_FILE_INDEX, Log_name, 1]" = "binlog.000001"
--source include/assert.inc

--let $max_attempts = 10
--let $attempt = 0
--let $delay = 1
--echo # Purge persistent snapshot by timestamp
--let $row_count = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX`
while ($row_count < 2 && $attempt < $max_attempts) {
    let $row_count = `SELECT COUNT(*) FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX`;
    if ($row_count >= 4) {
        break;
    }
    --inc $attempt
    --sleep 1
}
--disable_result_log
SELECT * FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX;
--enable_result_log

--let $snapshot_created_ts = `SELECT CREATED_TS FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX LIMIT 1 OFFSET 2`
--let $assert_text= Purge consistent snapshot.
--let purge_res = `SELECT CONSISTENT_PERSISTENT_SNAPSHOT_PURGE('$snapshot_created_ts');`
--let $assert_cond= INSTR("$purge_res","Purge consistent snapshot successfully") > 0
--source include/assert.inc

--let $assert_text= Check results after purge.
--let $assert_cond= "[SELECT CREATED_TS FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX, CREATED_TS, 1]" = "$snapshot_created_ts"
--source include/assert.inc

--echo # Purge persistent snapshot
--let $assert_text= Purge consistent snapshot.
--let purge_res = `SELECT CONSISTENT_PERSISTENT_SNAPSHOT_PURGE('all');`
--let $assert_cond= INSTR("$purge_res","Purge consistent snapshot successfully") > 0
--source include/assert.inc

--disable_result_log
SELECT * FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX;
--enable_result_log

--echo # Cleanup
DROP DATABASE db1;
