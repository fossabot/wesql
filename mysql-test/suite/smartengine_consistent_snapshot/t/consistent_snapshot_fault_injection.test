#
# Test for consistent snapshot from object store
#
--echo # Wait for at least 1 snapshots to be generated 
let $wait_condition= SELECT count(*) =1 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

CREATE DATABASE db1;
CREATE TABLE t1(c1 int, c2 char(200)) ENGINE=SMARTENGINE ;
INSERT INTO t1 values(1, 'abcd');
INSERT INTO t1 values(2, 'abcd');
INSERT INTO t1 values(3, 'abcd');
INSERT INTO t1 values(4, 'abcd');
SELECT * FROM t1;

SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for at least 2 snapshots to be generated 
let $wait_condition= SELECT count(*) =2 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

--let $error_log=$MYSQLTEST_VARDIR/tmp/consistent_snapshot_fault_injection.err

--echo # fault_injection_put_innodb_index_to_objstore
set global debug = '+d,fault_injection_put_innodb_index_to_objstore';
INSERT INTO t1 SELECT * FROM t1;
SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for consistent snapshot fail.
let $wait_condition= SELECT PERSISTENT_PROGRESS = 'FAIL' FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_TASK_INFO;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc
set global debug = '-d,fault_injection_put_innodb_index_to_objstore';

SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for at least 3 snapshots to be generated 
let $wait_condition= SELECT count(*) = 3 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

--echo # fault_injection_delete_innodb_index_file
set global debug = '+d,fault_injection_delete_innodb_index_file';
INSERT INTO t1 SELECT * FROM t1;
SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for consistent snapshot fail.
let $wait_condition= SELECT PERSISTENT_PROGRESS = 'FAIL' FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_TASK_INFO;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc
set global debug = '-d,fault_injection_delete_innodb_index_file';

SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for at least 4 snapshots to be generated 
let $wait_condition= SELECT count(*) = 4 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

--echo # fault_injection_reopen_innodb_index_file
set global debug = '+d,fault_injection_reopen_innodb_index_file';
INSERT INTO t1 SELECT * FROM t1;
SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for consistent snapshot fail.
let $wait_condition= SELECT PERSISTENT_PROGRESS = 'FAIL' FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_TASK_INFO;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc
set global debug = '-d,fault_injection_reopen_innodb_index_file';

SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for at least 5 snapshots to be generated 
let $wait_condition= SELECT count(*) = 5 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

--echo # fault_injection_put_se_index_to_objstore
set global debug = '+d,fault_injection_put_se_index_to_objstore';
INSERT INTO t1 SELECT * FROM t1;
SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for consistent snapshot fail.
let $wait_condition= SELECT PERSISTENT_PROGRESS = 'FAIL' FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_TASK_INFO;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc
set global debug = '-d,fault_injection_put_se_index_to_objstore';

SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for at least 6 snapshots to be generated 
let $wait_condition= SELECT count(*) = 6 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

--echo # fault_injection_delete_se_index_file
set global debug = '+d,fault_injection_delete_se_index_file';
INSERT INTO t1 SELECT * FROM t1;
SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for consistent snapshot fail.
let $wait_condition= SELECT PERSISTENT_PROGRESS = 'FAIL' FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_TASK_INFO;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc
set global debug = '-d,fault_injection_delete_se_index_file';

SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for at least 7 snapshots to be generated 
let $wait_condition= SELECT count(*) = 7 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

--echo # fault_injection_reopen_se_index_file
set global debug = '+d,fault_injection_reopen_se_index_file';
INSERT INTO t1 SELECT * FROM t1;
SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
--echo # Wait for consistent snapshot fail.
let $wait_condition= SELECT PERSISTENT_PROGRESS = 'FAIL' FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_TASK_INFO;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc
set global debug = '-d,fault_injection_reopen_se_index_file';

--echo # Wait for at least 8 snapshots to be generated 
SELECT SNAPSHOT_ARCHIVE_PERSISTENT_FORCE();
let $wait_condition= SELECT count(*) = 8 FROM INFORMATION_SCHEMA.SNAPSHOT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

--let $grep_file=$error_log
--let $grep_pattern=innodb.index upload to object store failed in move_crash_safe_index_file_to_index_file
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_pattern=innodb.index delete failed in move_crash_safe_index_file_to_index_file
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_pattern=innodb.index open failed in move_crash_safe_index_file_to_index_file
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_pattern=smartengine.index upload to object store failed in move_crash_safe_index_file_to_index_file
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_pattern=smartengine.index delete failed in move_crash_safe_index_file_to_index_file
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_pattern=smartengine.index open failed in move_crash_safe_index_file_to_index_file
--let $grep_output=boolean
--source include/grep_pattern.inc

##### binlog fault injection

--echo # Wait for all binlog persistent
let $wait_condition= SELECT count(*) = 1 FROM INFORMATION_SCHEMA.BINLOG_PERSISTENT_TASK_INFO, INFORMATION_SCHEMA.WESQL_CLUSTER_LOCAL where LAST_PERSISTED_RAFT_INDEX = COMMIT_INDEX;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc

# fault_injection_add_slice_queue
--echo # fault_injection_add_slice_queue 
set global debug= '+d, fault_injection_add_slice_queue';

INSERT INTO t1 values(1,'abcd');
INSERT INTO t1 values(2,'abcd');
INSERT INTO t1 values(3,'abcd');
INSERT INTO t1 values(4,'abcd');

--sleep 3

--let $grep_file=$error_log
--let $grep_pattern=fault_injection_add_slice_queue
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_file=$error_log
--let $grep_pattern=binlog archive persistent abort
--let $grep_output=boolean
--source include/grep_pattern.inc

set global debug= '-d, fault_injection_add_slice_queue';

--echo # Wait for all binlog persistent
let $wait_condition= SELECT count(*) = 1 FROM INFORMATION_SCHEMA.BINLOG_PERSISTENT_TASK_INFO, INFORMATION_SCHEMA.WESQL_CLUSTER_LOCAL where LAST_PERSISTED_RAFT_INDEX = COMMIT_INDEX;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc

# fault_injection_put_slice_to_objstore
--echo # fault_injection_put_slice_to_objstore 
set global debug= '+d, fault_injection_put_slice_to_objstore';

INSERT INTO t1 values(1,'abcd');
INSERT INTO t1 values(2,'abcd');
INSERT INTO t1 values(3,'abcd');
INSERT INTO t1 values(4,'abcd');

--echo # Wait for all binlog add expected persistent queue.
let $wait_condition= SELECT count(*) = 1 FROM INFORMATION_SCHEMA.BINLOG_PERSISTENT_TASK_INFO, INFORMATION_SCHEMA.WESQL_CLUSTER_LOCAL where LAST_PERSISTING_RAFT_INDEX = COMMIT_INDEX;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc

--sleep 3

--let $grep_file=$error_log
--let $grep_pattern=fault_injection_put_slice_to_objstore
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_file=$error_log
--let $grep_pattern=binlog slice persisted failed
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_file=$error_log
--let $grep_pattern=check found update index failed
--let $grep_output=boolean
--source include/grep_pattern.inc

set global debug= '-d, fault_injection_put_slice_to_objstore';

--echo # Wait for all binlog persistent
let $wait_condition= SELECT count(*) = 1 FROM INFORMATION_SCHEMA.BINLOG_PERSISTENT_TASK_INFO, INFORMATION_SCHEMA.WESQL_CLUSTER_LOCAL where LAST_PERSISTED_RAFT_INDEX = COMMIT_INDEX;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc

# fault_injection_binlog_archive_update_index_file
--echo # fault_injection_binlog_archive_update_index_file 
set global debug= '+d, fault_injection_binlog_archive_update_index_file';

INSERT INTO t1 values(1,'abcd');
INSERT INTO t1 values(2,'abcd');
INSERT INTO t1 values(3,'abcd');
INSERT INTO t1 values(4,'abcd');

--sleep 3

--let $grep_file=$error_log
--let $grep_pattern=fault_injection_binlog_archive_update_index_file
--let $grep_output=boolean
--source include/grep_pattern.inc

--let $grep_file=$error_log
--let $grep_pattern=check found update index failed
--let $grep_output=boolean
--source include/grep_pattern.inc

set global debug= '-d, fault_injection_binlog_archive_update_index_file';

--echo # Wait for all binlog persistent
let $wait_condition= SELECT count(*) = 1 FROM INFORMATION_SCHEMA.BINLOG_PERSISTENT_TASK_INFO, INFORMATION_SCHEMA.WESQL_CLUSTER_LOCAL where LAST_PERSISTED_RAFT_INDEX = COMMIT_INDEX;
let $wait_timeout= 600;
--source include/wait_condition_or_abort.inc

INSERT INTO t1 values(1,'abcd');
INSERT INTO t1 values(2,'abcd');
INSERT INTO t1 values(3,'abcd');
INSERT INTO t1 values(4,'abcd');
SELECT COUNT(*) FROM t1;

--let $MYSQLD_DATADIR=`select @@datadir`

--source include/stop_mysqld.inc
--source include/wait_until_disconnected.inc

--echo # Force rmdir datadir for recovery test
--force-rmdir $MYSQLD_DATADIR
--echo # Create an empty data directory...
--mkdir $MYSQLD_DATADIR

# consistent snapshot recovery
--echo # Recovery start from object store.
--let $restart_parameters=restart
--source include/start_mysqld.inc
SELECT COUNT(*) FROM t1;

--echo # Cleanup
DROP TABLE t1;
DROP DATABASE db1;
