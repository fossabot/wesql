#
# Test for consistent snapshot from object store
#

CREATE DATABASE db1;
CREATE TABLE t1(c1 int) ENGINE=SMARTENGINE ;
INSERT INTO t1 values(1);
INSERT INTO t1 values(2);
INSERT INTO t1 values(3);
INSERT INTO t1 values(4);
SELECT * FROM t1;
SHOW CREATE TABLE t1;
--echo # Wait for at least 1 snapshots to be generated 
let $wait_condition= SELECT count(*) >0 FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX;
--source include/wait_condition_or_abort.inc

--echo #
--echo # Check for contain innodb_archive consistent_snapshot.index
--let $datadir=`select @@datadir`
--let $region = `select @@objectstore_region`
--let $bucket = `select @@objectstore_bucket`
--let $grep_file=$datadir/$region/$bucket/consistent_snapshot.index
--let $grep_pattern=innodb_archive.*
--let $grep_output= boolean
--source include/grep_pattern.inc

--echo # Check for contain se_archive consistent_snapshot.index
--let $grep_pattern=se_archive.*
--let $grep_output= boolean
--source include/grep_pattern.inc

--echo # Select mysql innodb persistent views
--let $query = "SELECT SUBSTRING_INDEX(archive_name, '.', 1) AS name FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_INNODB_SNAPSHOT_INDEX ORDER BY name"
--let $value = query_get_value($query, name, 1)
--let $assert_text= 1st mysql innodb archive file should be innodb_archive_000001
--let $assert_cond= "$value" = "innodb_archive_000001"
--source include/assert.inc
--disable_warnings
--let $assert_text= mysql pesistent innodb archive file exist.
--let $assert_cond= COUNT(archive_name) > 0 from INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_INNODB_SNAPSHOT
--source include/assert.inc
--enable_warnings

--echo # Select smartengine persistent views
--let $query = "SELECT SUBSTRING_INDEX(archive_name, '.', 1) AS name FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SMARTENGINE_SNAPSHOT_INDEX ORDER BY name"
--let $value = query_get_value($query, name, 1)
--let $assert_text= 1st smartengine archive file should be se_archive_000001
--let $assert_cond= "$value" = "se_archive_000001"
--source include/assert.inc
--disable_warnings
--let $assert_text= smartengine pesistent archive file exist
--let $assert_cond= COUNT(archive_name) > 0 from INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SMARTENGINE_SNAPSHOT
--source include/assert.inc
--enable_warnings

--let $assert_text= smartengine backup exist.
--let $assert_cond= COUNT(*) > 0 FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_SMARTENGINE_BACKUP
--source include/assert.inc

INSERT INTO t1 SELECT * FROM t1;
sleep 2;
INSERT INTO t1 SELECT * FROM t1;
sleep 2;
INSERT INTO t1 SELECT * FROM t1;
sleep 2;
INSERT INTO t1 SELECT * FROM t1;

--echo # Wait for at least 4 snapshots to be generated 
--let $wait_condition= SELECT count(*) >3 FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX
--source include/wait_condition_or_abort.inc

--echo # Purge persistent snapshot to timestamp
--let $snapshot_created_ts = `SELECT CREATED_TS FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX LIMIT 1 OFFSET 2`
--let $assert_text= Purge consistent snapshot.
--let purge_res = `SELECT CONSISTENT_PERSISTENT_SNAPSHOT_PURGE('$snapshot_created_ts');`
--let $assert_cond= INSTR("$purge_res","Purge consistent snapshot successfully") > 0
--source include/assert.inc

--let $assert_text= Check results after purge.
--let $assert_cond= "[SELECT CREATED_TS FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX, CREATED_TS, 1]" = "$snapshot_created_ts"
--source include/assert.inc

--echo # Purge all persistent snapshot
--let $assert_text= Purge consistent snapshot.
--let purge_res = `SELECT CONSISTENT_PERSISTENT_SNAPSHOT_PURGE('all');`
--let $assert_cond= INSTR("$purge_res","Purge consistent snapshot successfully") > 0
--source include/assert.inc

--let $assert_text= Keep the last consistent snapshot.
--let $assert_cond= COUNT(*) > 0 FROM INFORMATION_SCHEMA.CONSISTENT_PERSISTENT_SNAPSHOT_INDEX
--source include/assert.inc

--echo # Cleanup
DROP TABLE t1;
DROP DATABASE db1;
