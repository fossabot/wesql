--source include/not_group_replication_plugin.inc
-- source include/have_debug.inc
-- source include/not_valgrind.inc
--source include/only_mts_replica_parallel_type_logical_clock.inc

--disable_warnings

# crash_in_a_worker
# crash_after_commit_before_update_pos
# crash_after_apply

--connect (con2,127.0.0.1,root,,test,$MYPORT_2)
--connection con2
SET @@GLOBAL.DEBUG= 'd, disable_se_persists_gtid';

#---------------------------------------------------
# crash_in_a_worker
#---------------------------------------------------
--connection default
let $master_uuid= `SELECT @@GLOBAL.SERVER_UUID`;
SET @@GLOBAL.DEBUG= 'd, disable_gtid_background_persister';
set debug = 'd, set_commit_parent_100';

# set up the tables and replicate it to the slave.
CREATE TABLE t1 (a int primary key) engine=innodb;
CREATE TABLE t2 (a int primary key) engine=innodb;
CREATE TABLE t3 (a int primary key) engine=innodb;
CREATE TABLE t4 (a int primary key) engine=innodb;
--source include/wait_follower_catchup.inc

--connection con2
--source include/wait_apply_catchup.inc
STOP SLAVE SQL_THREAD for channel 'consensus_replication_applier';
# wait_for_slave_sql_to_stop
--sleep 1
SET @@GLOBAL.DEBUG= '+d, crash_in_a_worker';

--connection default
set debug = 'd, set_commit_parent_150';

# execute transactions

# trx1 should be applied and its worker released for receiving more work.
# trx2 to trx5 are prepared in a way that they will be scheduled on the slave
# but will not be applied. In order to have all four transactions scheduled,
# the coordinator will have to distribute work by all four workers. The test
# case expects the slave to crash after some workload be distributed to the
# worker #2.

# trx1
INSERT INTO t1 values (0);

# trx2 should not complete on the slave.
BEGIN;
INSERT INTO t2 values (1),(2),(3);
UPDATE t2 SET a= a+1 WHERE a=3;
COMMIT;

# trx3 should not complete on the slave.
BEGIN;
INSERT INTO t3 values (1),(2),(3);
UPDATE t3 SET a= a+1 WHERE a=3;
COMMIT;

# trx4 should not complete on the slave.
BEGIN;
INSERT INTO t4 values (1),(2),(3);
UPDATE t4 SET a= a+1 WHERE a=3;
COMMIT;

# trx5 should not complete on the slave.
BEGIN;
INSERT INTO t1 values (1),(2),(3);
UPDATE t1 SET a= a+1 WHERE a=3;
COMMIT;

# Make sure the workload is already on the relay log before starting the
# applier to avoid issues with slow systems.
--let $follower_connection_name= con2
--source include/sync_leader_follower_log.inc

# This should prevent trx2 to trx5 from committing and will make all
# four MTS workers to be busy regardless of server speed.
connection con2;
BEGIN;
select * from t1 where a=4;
select * from t2 where a=4;
select * from t3 where a=4;
select * from t4 where a=4;

# make sure mtr expects a crash & restarts
-- exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect

--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;
START SLAVE SQL_THREAD for channel 'consensus_replication_applier';

-- source include/wait_until_disconnected.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--enable_reconnect
--let $wait_follower= 1;
--source include/wait_until_connected_again.inc
--let $wait_follower= 0;
--disable_reconnect

connection con2;
SET @@GLOBAL.DEBUG= 'd, disable_se_persists_gtid';
--source include/wait_apply_catchup.inc
--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;

connection default;
select * from t1;
select * from t2;
select * from t3;
select * from t4;
--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;

set debug='';
DROP TABLES t1,t2,t3,t4;
create table t(id int) engine=innodb;
--source include/wait_follower_catchup.inc

#---------------------------------------------------
# crash_after_commit_before_update_pos
#---------------------------------------------------
connection con2;
SET @@GLOBAL.DEBUG= 'd,crash_after_commit_before_update_pos';
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect

connection default;
insert into t values(1001);

connection con2;
--source include/wait_until_disconnected.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--enable_reconnect
--let $wait_follower= 1
--source include/wait_until_connected_again.inc
--let $wait_follower= 0
--disable_reconnect
SET @@GLOBAL.DEBUG= 'd, disable_se_persists_gtid';

--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;

SET @@GLOBAL.DEBUG= '+d,crash_after_commit_before_update_pos';
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect

connection default;
xa begin '1002';
insert into t values(1002);
xa end '1002';
xa prepare '1002';

connection con2;
--source include/wait_until_disconnected.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--enable_reconnect
--let $wait_follower= 1
--source include/wait_until_connected_again.inc
--let $wait_follower= 0
--disable_reconnect
SET @@GLOBAL.DEBUG= 'd, disable_se_persists_gtid';

--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;

connection default;
xa commit '1002';
--source include/wait_follower_catchup.inc

#---------------------------------------------------
# crash_before_update_pos
#---------------------------------------------------
connection con2;
SET @@GLOBAL.DEBUG= '+d,crash_before_update_pos';
--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect

connection default;
insert into t values(1016);

connection con2;
--source include/wait_until_disconnected.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--enable_reconnect
--let $wait_follower= 1
--source include/wait_until_connected_again.inc
--let $wait_follower= 0
--disable_reconnect
SET @@GLOBAL.DEBUG= 'd, disable_se_persists_gtid';
select * from t;
--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;

#---------------------------------------------------
# crash_after_apply
#---------------------------------------------------
connection con2;
set @@GLOBAL.DEBUG= '+d,crash_after_apply';
--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect

connection default;
insert into t values(1003);

connection con2;
--source include/wait_until_disconnected.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--enable_reconnect
--let $wait_follower= 1;
--source include/wait_until_connected_again.inc
--let $wait_follower= 0;
--disable_reconnect
SET @@GLOBAL.DEBUG= 'd, disable_se_persists_gtid';

--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;
select * from t;
disconnect con2;

#---------------------------------------------------
# Follower apply xa prapare Crash(crash_after_update_pos_before_apply)
#---------------------------------------------------

--connect (con101,127.0.0.1,root,,test,$MYPORT_1)
--connect (con102,127.0.0.1,root,,test,$MYPORT_1)

--connect (con2,127.0.0.1,root,,test,$MYPORT_2)

connection con101;
SET @@GLOBAL.DEBUG= 'd, disable_gtid_background_persister';
let $master_uuid= `SELECT @@GLOBAL.SERVER_UUID`;
create table t1(id int) engine=innodb;
--source include/wait_follower_catchup.inc

connection con2;
SET @@GLOBAL.DEBUG= 'd, disable_se_persists_gtid';
SET @@GLOBAL.DEBUG= '+d, crash_after_update_pos_before_apply';
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
stop consensus_replication;
start consensus_replication;
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--enable_reconnect
--let $wait_follower= 1;
--source include/wait_until_connected_again.inc
--let $wait_follower= 0;
--disable_reconnect

connection con101;
SET @@GLOBAL.DEBUG= 'd, disable_gtid_background_persister';
xa begin '1004';
insert into t1 values (1004);
xa end '1004';
xa prepare '1004';

connection con102;
--source include/wait_follower_catchup.inc

connection con2;
--error 2013
xa recover;

connection con2;
--enable_reconnect
let $wait_follower= 1;
--source include/wait_until_connected_again.inc
let $wait_follower= 0;
--disable_reconnect

SET @@GLOBAL.DEBUG= 'd, disable_se_persists_gtid';
--replace_result $master_uuid MASTER_UUID
SELECT @@GLOBAL.GTID_EXECUTED, @@GLOBAL.GTID_OWNED;
xa recover;
select * from t1;

--disconnect con101
--disconnect con102
--disconnect con2

connection default;
xa commit '1004';
drop table t1;

# cleanup
connection default;
DROP TABLES t;
SET @@GLOBAL.DEBUG= '';
--enable_warnings
