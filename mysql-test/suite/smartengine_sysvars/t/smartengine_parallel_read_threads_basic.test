
SET @start_global_value = @@global.smartengine_parallel_read_threads;
SELECT @start_global_value;

#
# exists as global and session
#
select @@global.smartengine_parallel_read_threads in (2, 64);
select @@global.smartengine_parallel_read_threads;
select @@session.smartengine_parallel_read_threads;
show global variables like 'smartengine_parallel_read_threads';
show session variables like 'smartengine_parallel_read_threads';
--disable_warnings
select * from performance_schema.global_variables where variable_name='smartengine_parallel_read_threads';
select * from performance_schema.session_variables where variable_name='smartengine_parallel_read_threads';
--enable_warnings

#
# show that it's writable
#
set global smartengine_parallel_read_threads=3;
select @@global.smartengine_parallel_read_threads;
--disable_warnings
select * from performance_schema.global_variables where variable_name='smartengine_parallel_read_threads';
select * from performance_schema.session_variables where variable_name='smartengine_parallel_read_threads';
--enable_warnings
set @@global.smartengine_parallel_read_threads=2;
select @@global.smartengine_parallel_read_threads;
--disable_warnings
select * from performance_schema.global_variables where variable_name='smartengine_parallel_read_threads';
select * from performance_schema.session_variables where variable_name='smartengine_parallel_read_threads';
--enable_warnings
set global smartengine_parallel_read_threads=0;
select @@global.smartengine_parallel_read_threads;
--disable_warnings
select * from performance_schema.global_variables where variable_name='smartengine_parallel_read_threads';
select * from performance_schema.session_variables where variable_name='smartengine_parallel_read_threads';
--enable_warnings
set @@global.smartengine_parallel_read_threads=3;
select @@global.smartengine_parallel_read_threads;
--disable_warnings
select * from performance_schema.global_variables where variable_name='smartengine_parallel_read_threads';
select * from performance_schema.session_variables where variable_name='smartengine_parallel_read_threads';
--enable_warnings
set session smartengine_parallel_read_threads=2;
set @@session.smartengine_parallel_read_threads=3;

#
# incorrect types
#
--error ER_WRONG_TYPE_FOR_VAR
set global smartengine_parallel_read_threads=1.1;
--error ER_WRONG_TYPE_FOR_VAR
set global smartengine_parallel_read_threads=1e1;
--echo NOTE: The following should fail with ER_WRONG_VALUE_FOR_VAR (BUG#50643)
set global smartengine_parallel_read_threads=-3;
select @@global.smartengine_parallel_read_threads;
--disable_warnings
select * from performance_schema.global_variables where variable_name='smartengine_parallel_read_threads';
select * from performance_schema.session_variables where variable_name='smartengine_parallel_read_threads';
--enable_warnings
--error ER_WRONG_TYPE_FOR_VAR
set global smartengine_parallel_read_threads='AUTO';

select * from performance_schema.session_variables where variable_name='smartengine_parallel_read_threads';

#
#insert many rows and select count(*)
#
connect(con1, localhost, root,,);
connection default;

create table t1(a int primary key auto_increment, b text) ENGINE = SMARTENGINE;
let $i=19998;
let $batch = 1000;

--disable_query_log
eval begin;
while ($i) {
  eval insert into t1 values($i, repeat('a', 65535));
  dec $i;
  expr $ci = $i % $batch;

  if ($ci == 0) {
    eval commit;
    eval begin;
  }
}
eval commit;
--enable_query_log
set global smartengine_flush_memtable=1;
select count(*) from t1;

#
# read from write-batch and memtable
#
connection con1;
connection default;

drop table t1;
create table t1(a int primary key, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,1),(3,3),(5,5);
select count(*) from t1;

begin;
insert into t1 values(2,2),(4,4),(6,6);
select count(*) from t1;
commit;

#
# read from write-batch and extents
#
drop table t1;
create table t1(a int primary key, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,1),(3,3),(5,5);
select count(*) from t1;
set global smartengine_flush_memtable=1;
select count(*) from t1;

begin;
insert into t1 values(2,2),(4,4),(6,6);
select count(*) from t1;
commit;

#
# check MVCC (READ-COMMMITTED)
#
drop table t1;
create table t1(a int primary key, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,1),(3,3),(5,5);
select count(*) from t1;
set global smartengine_flush_memtable=1;
select @@transaction_isolation into @saved_isolation;

set transaction_isolation = 'READ-COMMITTED';
begin;
select count(*) from t1;


connection con1;
begin;
insert into t1 values(2,2),(4,4),(6,6);
select count(*) from t1;
commit;

connection default;
select count(*) from t1;
commit;
select count(*) from t1;

#
# check MVCC (REPEATABLE-READ)
#
connection default;
drop table t1;
create table t1(a int primary key, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,1),(3,3),(5,5);
select count(*) from t1;
set global smartengine_flush_memtable=1;

set transaction_isolation = 'REPEATABLE-READ';
begin;
select count(*) from t1;

connection con1;
begin;
insert into t1 values(2,2),(4,4),(6,6);
select count(*) from t1;
commit;

connection default;
select count(*) from t1;
commit;
select count(*) from t1;


set smartengine_parallel_read_threads=1;
select * from performance_schema.session_variables where variable_name='smartengine_parallel_read_threads';

#
#insert many rows and select count(*)
#
connection con1;
connection default;

drop table t1;
create table t1(a int primary key auto_increment, b text) ENGINE = SMARTENGINE;
let $i=19998;
let $batch = 1000;

--disable_query_log
eval begin;
while ($i) {
  eval insert into t1 values($i, repeat('a', 65535));
  dec $i;
  expr $ci = $i % $batch;

  if ($ci == 0) {
    eval commit;
    eval begin;
  }
}
eval commit;
--enable_query_log
set global smartengine_flush_memtable=1;
select count(*) from t1;


#
# read from write-batch and memtable
#
drop table t1;
create table t1(a int primary key, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,1),(3,3),(5,5);
select count(*) from t1;

begin;
insert into t1 values(2,2),(4,4),(6,6);
select count(*) from t1;
commit;

#
# read from write-batch and extents
#
drop table t1;
create table t1(a int primary key, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,1),(3,3),(5,5);
select count(*) from t1;
set global smartengine_flush_memtable=1;
select count(*) from t1;

begin;
insert into t1 values(2,2),(4,4),(6,6);
select count(*) from t1;
commit;

#
# check MVCC (READ-COMMMITTED)
#
drop table t1;
create table t1(a int primary key, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,1),(3,3),(5,5);
select count(*) from t1;
set global smartengine_flush_memtable=1;
select @@transaction_isolation into @saved_isolation;

set transaction_isolation = 'READ-COMMITTED';
begin;
select count(*) from t1;


connection con1;
begin;
insert into t1 values(2,2),(4,4),(6,6);
select count(*) from t1;
commit;

connection default;
select count(*) from t1;
commit;
select count(*) from t1;

#
# check MVCC (REPEATABLE-READ)
#
connection default;
drop table t1;
create table t1(a int primary key, b int) ENGINE = SMARTENGINE;
insert into t1 values(1,1),(3,3),(5,5);
select count(*) from t1;
set global smartengine_flush_memtable=1;

set transaction_isolation = 'REPEATABLE-READ';
begin;
select count(*) from t1;

connection con1;
begin;
insert into t1 values(2,2),(4,4),(6,6);
select count(*) from t1;
commit;

connection default;
select count(*) from t1;
commit;
select count(*) from t1;



#
# Cleanup
#
SET @@global.smartengine_parallel_read_threads = @start_global_value;
SELECT @@global.smartengine_parallel_read_threads;
drop table t1;
connection default;
set transaction_isolation = @saved_isolation;


